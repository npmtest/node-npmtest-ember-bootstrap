{"/home/travis/build/npmtest/node-npmtest-ember-bootstrap/test.js":"/* istanbul instrument in package npmtest_ember_bootstrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/lib.npmtest_ember_bootstrap.js":"/* istanbul instrument in package npmtest_ember_bootstrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_bootstrap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_bootstrap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-bootstrap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_bootstrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_bootstrap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_bootstrap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_bootstrap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_bootstrap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_bootstrap.__dirname + '/lib.npmtest_ember_bootstrap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/index.js":"/* jshint node: true */\n'use strict';\n\nvar path = require('path'),\n  util = require('util'),\n  extend = util._extend,\n  mergeTrees = require('broccoli-merge-trees'),\n  Funnel = require('broccoli-funnel');\n\nvar defaultOptions = {\n  importBootstrapTheme: false,\n  importBootstrapCSS: true,\n  importBootstrapFont: true\n};\n\nmodule.exports = {\n  name: 'ember-bootstrap',\n\n  included: function included(app) {\n    // workaround for https://github.com/ember-cli/ember-cli/issues/3718\n    if (typeof app.import !== 'function' && app.app) {\n      app = app.app;\n    }\n    this.app = app;\n\n    var options = extend(defaultOptions, app.options['ember-bootstrap']);\n    var bootstrapPath = path.join(app.bowerDirectory, 'bootstrap/dist');\n\n    // Import css from bootstrap\n    if (options.importBootstrapCSS) {\n      app.import(path.join(bootstrapPath, 'css/bootstrap.css'));\n      app.import(path.join(bootstrapPath, 'css/bootstrap.css.map'), {destDir: 'assets'});\n    }\n\n    if (options.importBootstrapTheme) {\n      app.import(path.join(bootstrapPath, 'css/bootstrap-theme.css'));\n      app.import(path.join(bootstrapPath, 'css/bootstrap-theme.css.map'), {destDir: 'assets'});\n    }\n\n    // Import glyphicons\n    if (options.importBootstrapFont) {\n      app.import(path.join(bootstrapPath, 'fonts/glyphicons-halflings-regular.eot'), {destDir: '/fonts'});\n      app.import(path.join(bootstrapPath, 'fonts/glyphicons-halflings-regular.svg'), {destDir: '/fonts'});\n      app.import(path.join(bootstrapPath, 'fonts/glyphicons-halflings-regular.ttf'), {destDir: '/fonts'});\n      app.import(path.join(bootstrapPath, 'fonts/glyphicons-halflings-regular.woff'), {destDir: '/fonts'});\n      app.import(path.join(bootstrapPath, 'fonts/glyphicons-halflings-regular.woff2'), {destDir: '/fonts'});\n    }\n\n    if (!process.env.EMBER_CLI_FASTBOOT) {\n      app.import('vendor/transition.js');\n    }\n  },\n\n  treeForStyles: function treeForStyles(tree) {\n    var styleTrees = [];\n\n    if (this.app.project.findAddonByName('ember-cli-less')) {\n      var lessTree = new Funnel(path.join(this.app.bowerDirectory, 'bootstrap/less'), {\n        destDir: 'ember-bootstrap'\n      });\n      styleTrees.push(lessTree);\n    }\n    \n    if (tree) {\n      styleTrees.push(tree);\n    }\n    \n    return mergeTrees(styleTrees, { overwrite: true });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/config.js":"import Ember from 'ember';\n\nconst Config = Ember.Object.extend();\n\nConfig.reopenClass({\n  formValidationSuccessIcon: 'glyphicon glyphicon-ok',\n  formValidationErrorIcon: 'glyphicon glyphicon-remove',\n  formValidationWarningIcon: 'glyphicon glyphicon-warning-sign',\n  formValidationInfoIcon: 'glyphicon glyphicon-info-sign',\n  insertEmberWormholeElementToDom: true,\n\n  load(config = {}) {\n    for (let property in config) {\n      if (this.hasOwnProperty(property) && typeof this[property] !== 'function') {\n        this[property] = config[property];\n      }\n    }\n  }\n});\n\nexport default Config;\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-accordion-item.js":"import Ember from 'ember';\nimport TypeClass from 'ember-bootstrap/mixins/type-class';\nimport ComponentChild from 'ember-bootstrap/mixins/component-child';\nimport Accordion from 'ember-bootstrap/components/bs-accordion';\n\nconst { computed } = Ember;\n\n/**\n A collapsible/expandable item within an accordion\n\n See [Components.Accordion](Components.Accordion.html) for examples.\n\n\n @class AccordionItem\n @namespace Components\n @extends Ember.Component\n @uses Mixins.ComponentChild\n @uses Mixins.TypeClass\n @public\n */\nexport default Ember.Component.extend(ComponentChild, TypeClass, {\n  classNames: ['panel'],\n\n  /**\n   * @property classTypePrefix\n   * @type String\n   * @default 'panel'\n   * @protected\n   */\n  classTypePrefix: 'panel',\n\n  /**\n   * The title of the accordion item, displayed as a .panel-title element\n   *\n   * @property title\n   * @type string\n   * @public\n   */\n  title: null,\n\n  /**\n   * The value of the accordion item, which is used as the value of the `selected` property of the parent [Components.Accordion](Components.Accordion.html) component\n   *\n   * @property value\n   * @public\n   */\n  value: computed.oneWay('elementId'),\n\n  selected: computed.alias('accordion.selected'),\n\n  collapsed: computed('value', 'selected', function() {\n    return this.get('value') !== this.get('selected');\n  }),\n  active: computed.not('collapsed'),\n\n  /**\n   * Reference to the parent `Components.Accordion` class.\n   *\n   * @property accordion\n   * @private\n   */\n  accordion: computed(function() {\n    return this.nearestOfType(Accordion);\n  }),\n\n  target: computed.reads('accordion'),\n\n  actions: {\n    toggleActive() {\n      let value = this.get('value');\n      let previous = this.get('selected');\n      let active = this.get('active');\n      if (!active) {\n        this.set('selected', value);\n        this.send('selected', value, previous);\n      } else {\n        this.set('selected', null);\n        this.send('selected', null, previous);\n      }\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-accordion.js":"import Ember from 'ember';\nimport ComponentParent from 'ember-bootstrap/mixins/component-parent';\n\n/**\n Bootstrap-style accordion group, with collapsible/expandable items.\n See http://getbootstrap.com/components/#btn-groups\n\n Use as a block level component with any number of [Components.AccordionItem](Components.AccordionItem.html) components as children:\n\n ```handlebars\n  {{#bs-accordion selected=selected}}\n      {{#bs-accordion-item value=\"1\" title=\"First item\"}}\n        <p>Lorem ipsum...</p>\n      {{/bs-accordion-item}}\n      {{#bs-accordion-item value=\"2\" title=\"Second item\"}}\n        <p>Lorem ipsum...</p>\n      {{/bs-accordion-item}}\n      {{#bs-accordion-item value=\"3\" title=\"Third item\"}}\n        <p>Lorem ipsum...</p>\n      {{/bs-accordion-item}}\n  {{/bs-accordion}}\n\n  <p>Selected accordion item: {{selected}}</p>\n ```\n\n\n @class Accordion\n @namespace Components\n @extends Ember.Component\n @uses Mixins.ComponentParent\n @public\n */\nexport default Ember.Component.extend(ComponentParent, {\n  classNames: ['panel-group'],\n  ariaRole: 'tablist',\n\n  /**\n   * The value of the currently selected accordion item\n   *\n   * @property selected\n   * @public\n   */\n  selected: null,\n\n  actions: {\n    selected(currentValue, previousValue) {\n      this.sendAction('action', currentValue, previousValue);\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-alert.js":"import Ember from 'ember';\nimport TypeClass from 'ember-bootstrap/mixins/type-class';\n\nconst { computed, observer } = Ember;\n\n/**\n Implements Bootstrap alerts, see http://getbootstrap.com/components/#alerts\n\n By default it is a user dismissible alert with a fade out animation, both of which can be disabled. Be sure to set the\n `type` property for proper styling.\n\n ```hbs\n {{#bs-alert type=\"success\"}}\n <strong>Well done!</strong> You successfully read this important alert message.\n {{/bs-alert}}\n ```\n\n @class Alert\n @namespace Components\n @extends Ember.Component\n @uses Mixins.TypeClass\n @public\n */\nexport default Ember.Component.extend(TypeClass, {\n  classNameBindings: ['alert', 'fade', 'in', 'alert-dismissible'],\n\n  /**\n   * A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss\n   * the alert.\n   *\n   * @property dismissible\n   * @type boolean\n   * @default true\n   * @public\n   */\n  dismissible: true,\n  'alert-dismissible': computed.readOnly('dismissible'),\n\n  /**\n   * If true the alert is completely hidden. Will be set when the fade animation has finished.\n   *\n   * @property hidden\n   * @type boolean\n   * @default false\n   * @readonly\n   * @protected\n   */\n  hidden: false,\n\n  /**\n   * This property controls if the alert should be visible. If false it might still be in the DOM until the fade animation\n   * has completed.\n   *\n   * @property visible\n   * @type boolean\n   * @default true\n   * @public\n   */\n  visible: true,\n  notVisible: computed.not('visible'),\n\n  /**\n   * Set to false to disable the fade out animation when hiding the alert.\n   *\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * Computed property to set the alert class to the component div. Will be false when dismissed to have the component\n   * div (which cannot be removed form DOM by the component itself) without any markup.\n   *\n   * @property alert\n   * @type boolean\n   * @private\n   */\n  alert: computed.not('hidden'),\n  in: computed.and('visible', 'fade'),\n\n  /**\n   * @property classTypePrefix\n   * @type String\n   * @default 'alert'\n   * @protected\n   */\n  classTypePrefix: 'alert',\n\n  /**\n   * The duration of the fade out animation\n   *\n   * @property fadeDuration\n   * @type integer\n   * @default 150\n   * @public\n   */\n  fadeDuration: 150,\n\n  /**\n   * The action to be sent after the alert has been dismissed (including the CSS transition).\n   *\n   * @property dismissedAction\n   * @type string\n   * @default null\n   * @public\n   */\n  dismissedAction: null,\n\n  actions: {\n    dismiss() {\n      this.set('visible', false);\n    }\n  },\n\n  _onVisibleChange: observer('visible', function() {\n    if (this.get('visible')) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }),\n\n  /**\n   * Call to make the alert visible again after it has been hidden\n   *\n   * @method show\n   * @private\n   */\n  show() {\n    this.setProperties({\n      hidden: false\n    });\n  },\n\n  /**\n   * Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally\n   * dismissed.\n   *\n   * @method hide\n   * @private\n   */\n  hide() {\n    if (this.get('fade')) {\n      Ember.run.later(this, function() {\n        if (!this.get('isDestroyed')) {\n          this.set('hidden', true);\n          this.sendAction('dismissedAction');\n        }\n      }, this.get('fadeDuration'));\n    } else {\n      this.setProperties({\n        hidden: true\n      });\n      this.sendAction('dismissedAction');\n    }\n  },\n\n  init() {\n    this._super(...arguments);\n    this.set('hidden', !this.get('visible'));\n  }\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-button-group.js":"import Ember from 'ember';\nimport SizeClass from 'ember-bootstrap/mixins/size-class';\nimport ComponentParent from 'ember-bootstrap/mixins/component-parent';\n\nconst { computed, observer } = Ember;\n\n/**\n Bootstrap-style button group, that visually groups buttons, and optionally adds radio/checkbox like behaviour.\n See http://getbootstrap.com/components/#btn-groups\n\n Use as a block level component with any number of [Components.Button](Components.Button.html) components as children:\n\n ```handlebars\n {{#bs-button-group}}\n   {{#bs-button}}1{{/bs-button}}\n   {{#bs-button}}2{{/bs-button}}\n   {{#bs-button}}3{{/bs-button}}\n {{/bs-button-group}}\n ```\n\n ### Radio-like behaviour\n\n Use the `type` property set to \"radio\" to make the child buttons toggle like radio buttons, i.e. only one button can be active.\n Set the `value` property of the buttons to something meaningful. The `value` property of the button group will then reflect\n the value of the active button:\n\n ```handlebars\n {{#bs-button-group value=buttonGroupValue type=\"radio\"}}\n   {{#bs-button value='foo'}}foo{{/bs-button}}\n   {{#bs-button value='bar'}}bar{{/bs-button}}\n   {{#bs-button value='baz'}}baz{{/bs-button}}\n {{/bs-button-group}}\n\n You selected: {{buttonGroupValue}}!\n ```\n\n ### Checkbox-like behaviour\n\n Set `type` to \"checkbox\" to make any number of child buttons selectable. The `value` property will be an array\n of all the values of the active buttons:\n\n ```handlebars\n {{#bs-button-group value=buttonGroupValue type=\"checkbox\"}}\n   {{#bs-button value='foo'}}foo{{/bs-button}}\n   {{#bs-button value='bar'}}bar{{/bs-button}}\n   {{#bs-button value='baz'}}baz{{/bs-button}}\n {{/bs-button-group}}\n\n You selected:\n <ul>\n {{#each value in buttonGroupValue}}\n   <li>{{value}}</li>\n {{/each}}\n </ul>\n ```\n\n @class ButtonGroup\n @namespace Components\n @extends Ember.Component\n @uses Mixins.SizeClass\n @public\n */\nexport default Ember.Component.extend(ComponentParent, SizeClass, {\n  /**\n   * @type string\n   * @property ariaRole\n   * @default 'group'\n   * @protected\n   */\n  ariaRole: 'group',\n\n  /**\n   * @property classNames\n   * @type array\n   * @default ['btn-group']\n   * @protected\n   */\n  classNames: ['btn-group'],\n\n  /**\n   * @property classNameBindings\n   * @type array\n   * @protected\n   */\n  classNameBindings: ['vertical:btn-group-vertical', 'justified:btn-group-justified'],\n\n  /**\n   * @property classTypePrefix\n   * @type String\n   * @default 'btn-group'\n   * @protected\n   */\n  classTypePrefix: 'btn-group',\n\n  /**\n   * Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical\n   *\n   * @property vertical\n   * @type boolean\n   * @default false\n   * @public\n   */\n  vertical: false,\n\n  /**\n   * Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.\n   *\n   * *Important*: You have to wrap every button component in a `div class=\"btn-group\">`:\n   *\n   * ```handlebars\n   * <div class=\"btn-group\" role=\"group\">\n   * {{#bs-button}}My Button{{/bs-button}}\n   * </div>\n   * ```\n   *\n   * See http://getbootstrap.com/components/#btn-groups-justified\n   *\n   * @property justified\n   * @type boolean\n   * @default false\n   * @public\n   */\n  justified: false,\n\n  /**\n   * The type of the button group specifies how child buttons behave and how the `value` property will be computed:\n   *\n   * ### null\n   * If `type` is not set (null), the button group will add no functionality besides Bootstrap styling\n   *\n   * ### radio\n   * if `type` is set to \"radio\", the buttons will behave like radio buttons:\n   * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\n   * * only one button may be active\n   * * the `value` property of the button group will reflect the `value` property of the active button\n   *\n   * ### checkbox\n   * if `type` is set to \"checkbox\", the buttons will behave like checkboxes:\n   * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\n   * * any number of buttons may be active\n   * * the `value` property of the button group will be an array containing the `value` properties of all active buttons\n   *\n   * @property type\n   * @type string\n   * @default null\n   * @public\n   */\n  type: null,\n\n  /**\n   * The value of the button group, computed by its child buttons.\n   * See the `type` property for how the value property is constructed.\n   *\n   * When you set the value, the corresponding buttons will be activated:\n   * * use a single value for a radio button group to activate the button with the same value\n   * * use an array of values for a checkbox button group to activate all the buttons with values contained in the array\n   *\n   * @property value\n   * @type array\n   * @public\n   */\n  value: undefined,\n\n  _syncValueToActiveButtons: observer('value', 'children.@each.value', '_inDOM', function() {\n    if (!this._inDOM) {\n      return;\n    }\n    let value = this.get('value');\n    let values = Ember.A(!Ember.isArray(value) ? [value] : value);\n    this.get('children')\n      .forEach(function(button) {\n        button.set('active', values.includes(button.get('value')));\n      });\n  }),\n\n  /**\n   * Child buttons that are active (pressed)\n   * @property activeChildren\n   * @type array\n   * @protected\n   */\n  activeChildren: computed.filterBy('children', 'active', true),\n\n  lastActiveChildren: null,\n  newActiveChildren: computed.setDiff('activeChildren', 'lastActiveChildren'),\n  _observeButtons: observer('activeChildren.[]', 'type', function() {\n    let type = this.get('type');\n\n    if (!this._inDOM || (type !== 'radio' && type !== 'checkbox')) {\n      return;\n    }\n\n    Ember.run.scheduleOnce('actions', this, function() {\n      // the button that just became active\n      let value;\n\n      switch (type) {\n        case 'radio':\n          let newActive = Ember.A(this.get('newActiveChildren')).objectAt(0);\n          if (newActive) {\n            value = newActive.get('value');\n          } else {\n            let lastActive = this.get('lastActiveChildren.firstObject');\n            if (lastActive) {\n              lastActive.set('active', this.get('value') ? true : false);\n            }\n          }\n          break;\n        case 'checkbox':\n          value = this.get('activeChildren').mapBy('value');\n          break;\n      }\n      if (typeof value !== 'undefined') {\n        this.set('value', value);\n      }\n      // remember activeChildren, used as a replacement for a before observer as they will be deprecated in the future...\n      this.set('lastActiveChildren', Ember.A(this.get('activeChildren').slice()));\n    });\n  }),\n\n  _observeType: observer('type', 'children.[]', function() {\n    if (this.get('type') === 'radio' || this.get('type') === 'checkbox') {\n      // set all child buttons to toggle\n      this.get('children').forEach(function(button) {\n        button.set('toggle', true);\n      });\n    }\n  }),\n\n  init() {\n    this._super();\n    this.set('lastActiveChildren', Ember.A());\n  },\n\n  _inDOM: false,\n\n  didInsertElement() {\n    this.set('_inDOM', true);\n    this.get('activeChildren');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-button.js":"import Ember from 'ember';\nimport TypeClass from 'ember-bootstrap/mixins/type-class';\nimport SizeClass from 'ember-bootstrap/mixins/size-class';\nimport ComponentChild from 'ember-bootstrap/mixins/component-child';\n\nconst { computed, observer, typeOf } = Ember;\n\n/**\n Implements a HTML button element, with support for all [Bootstrap button CSS styles](http://getbootstrap.com/css/#buttons)\n as well as advanced functionality such as button states.\n\n ### Basic Usage\n\n ```hbs\n {{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\"}}\n Downloads\n {{/bs-button}}\n ```\n\n ### Actions\n\n Set the action property of the component to send an action to your controller. The following parameters will be sent:\n * value: the button's value, see the `value` property\n * event: the browsers event object\n * callback: a function that may be called from the action handler to supply a Promise to the button component for automatic state handling\n\n ```hbs\n {{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" action=\"download\"}}\n Download\n {{/bs-button}}\n ```\n\n ### States\n\n Use the `textState` property to change the label of the button. You can bind it to a controller property to set a \"loading\" state for example.\n The label of the button will be taken from the `<state>Text` property.\n\n ```hbs\n {{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" textState=buttonState defaultText=\"Download\" loadingText=\"Loading...\" action=\"download\"}}\n ```\n\n ```js\n App.ApplicationController = Ember.Controller.extend({\n   buttonState: \"default\"\n   actions: {\n     download: function() {\n       this.set(\"buttonState\", \"loading\");\n     }\n   }\n });\n ```\n\n ### Promise support for automatic state change\n\n When returning a Promise for any asynchronous operation from the click closure action the button will\n manage its `textState` property automatically, changing its value according to the state of the promise:\n \"default\" > \"pending\" > \"resolved\"/\"rejected\"\n\n ```hbs\n {{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" defaultText=\"Download\" pendingText=\"Loading...\" resolvedText=\"Completed!\" rejectedText=\"Oups!?\" action=(action \"download\")}}\n ```\n\n ```js\n // controller.js\nexport default Ember.Controller.extend({\n   actions: {\n     download(actionParam, evt) {\n       return new Ember.RSVP.Promise(...);\n     }\n   }\n });\n ```\n\n @class Button\n @namespace Components\n @extends Ember.Component\n @uses Mixins.TypeClass\n @uses Mixins.SizeClass\n @public\n */\nexport default Ember.Component.extend(ComponentChild, TypeClass, SizeClass, {\n  tagName: 'button',\n  classNames: ['btn'],\n  classNameBindings: ['active', 'block:btn-block'],\n\n  /**\n   * @property classTypePrefix\n   * @type String\n   * @default 'btn'\n   * @protected\n   */\n  classTypePrefix: 'btn',\n\n  attributeBindings: ['disabled', 'buttonType:type', 'title'],\n\n  /**\n   * Default label of the button. Not need if used as a block component\n   *\n   * @property defaultText\n   * @type string\n   * @public\n   */\n  defaultText: null,\n\n  /**\n   * Property to disable the button\n   *\n   * @property disabled\n   * @type boolean\n   * @default false\n   * @public\n   */\n  disabled: false,\n\n  /**\n   * Set the type of the button, either 'button' or 'submit'\n   *\n   * @property buttonType\n   * @type String\n   * @default 'button'\n   * @public\n   */\n  buttonType: 'button',\n\n  /**\n   * Set the 'active' class to apply active/pressed CSS styling\n   *\n   * @property active\n   * @type boolean\n   * @default false\n   * @public\n   */\n  active: false,\n\n  /**\n   * Property for block level buttons\n   *\n   * See the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\n   * @property block\n   * @type boolean\n   * @default false\n   * @public\n   */\n  block: false,\n\n  /**\n   * If toggle property is true, clicking the button will toggle the active state\n   *\n   * @property toggle\n   * @type boolean\n   * @default false\n   * @public\n   */\n  toggle: false,\n\n  /**\n   * If button is active and this is set, the icon property will match this property\n   *\n   * @property iconActive\n   * @type String\n   * @public\n   */\n  iconActive: null,\n\n  /**\n   * If button is inactive and this is set, the icon property will match this property\n   *\n   * @property iconInactive\n   * @type String\n   * @public\n   */\n  iconInactive: null,\n\n  /**\n   * Class(es) (e.g. glyphicons or font awesome) to use as a button icon\n   * This will render a <i class=\"{{icon}}\"></i> element in front of the button's label\n   *\n   * @property icon\n   * @type String\n   * @readonly\n   * @protected\n   */\n  icon: computed('active', function() {\n    if (this.get('active')) {\n      return this.get('iconActive');\n    } else {\n      return this.get('iconInactive');\n    }\n  }),\n\n  /**\n   * Supply a value that will be associated with this button. This will be send\n   * as a parameter of the default action triggered when clicking the button\n   *\n   * @property value\n   * @type any\n   * @public\n   */\n  value: null,\n\n  /**\n   * State of the button. The button's label (if not used as a block component) will be set to the\n   * `<state>Text` property.\n   * This property will automatically be set when using a click action that supplies the callback with an promise\n   *\n   * @property textState\n   * @type String\n   * @default 'default'\n   * @protected\n   */\n  textState: 'default',\n\n  /**\n   * Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.\n   *\n   * @property reset\n   * @type boolean\n   * @public\n   */\n  reset: null,\n\n  /**\n   * The HTML title attribute\n   *\n   * @property title\n   * @type string\n   * @public\n   */\n  title: null,\n\n  /**\n   * This will reset the state property to 'default', and with that the button's label to defaultText\n   *\n   * @method resetState\n   * @protected\n   */\n  resetState() {\n    this.set('textState', 'default');\n  },\n\n  resetObserver: observer('reset', function() {\n    if (this.get('reset')) {\n      Ember.run.scheduleOnce('actions', this, function() {\n        this.set('textState', 'default');\n      });\n    }\n  }),\n\n  text: computed('textState', 'defaultText', 'pendingText', 'resolvedText', 'rejectedText', function() {\n    return this.getWithDefault(`${this.get('textState')}Text`, this.get('defaultText'));\n  }),\n\n  /**\n   * Click handler. This will send the default \"action\" action, with the following parameters:\n   * * value of the button (that is the value of the \"value\" property)\n   * * original event object of the click event\n   * * callback: call that with a promise object, and the buttons state will automatically set to \"pending\", \"resolved\" and/or \"rejected\"\n   *\n   * When using closure actions just return the promise instead of calling the above mentioned callback.\n   *\n   * @method click\n   * @protected\n   * @param evt\n   */\n  click(evt) {\n    if (this.get('toggle')) {\n      this.toggleProperty('active');\n    }\n    let that = this;\n\n    function handleButtonPromise(promise) {\n      if (promise) {\n        that.set('textState', 'pending');\n        promise.then(\n          function() {\n            if (!that.get('isDestroyed')) {\n              that.set('textState', 'resolved');\n            }\n          },\n          function() {\n            if (!that.get('isDestroyed')) {\n              that.set('textState', 'rejected');\n            }\n          }\n        );\n      }\n    }\n\n    let action = this.get('action');\n    if (typeOf(action) === 'function') {\n      let promise = action(this.get('value'), evt, handleButtonPromise);\n      if (promise && promise.then) {\n        handleButtonPromise(promise);\n      }\n    } else {\n      // continue to support string actions for now...\n      this.sendAction('action', this.get('value'), evt, handleButtonPromise);\n    }\n  },\n\n  init() {\n    this._super(...arguments);\n    this.get('reset');\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-collapse.js":"import Ember from 'ember';\n\nconst { computed, observer } = Ember;\n\n/**\n An Ember component that mimics the behaviour of Bootstrap's collapse.js plugin, see http://getbootstrap.com/javascript/#collapse\n\n ```hbs\n {{#bs-collapse collapsed=collapsed}}\n  <div class=\"well\">\n    <h2>Collapse</h2>\n    <p>This is collapsible content</p>\n  </div>\n {{/bs-collapse}}\n ```\n\n @class Collapse\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n\n  classNameBindings: ['collapse', 'in', 'collapsing'],\n  attributeBindings: ['style'],\n\n  /**\n   * Collapsed/expanded state\n   *\n   * @property collapsed\n   * @type boolean\n   * @default true\n   * @public\n   */\n  collapsed: true,\n\n  /**\n   * True if this item is expanded\n   *\n   * @property active\n   * @protected\n   */\n  active: false,\n\n  collapse: computed.not('transitioning'),\n  collapsing: computed.alias('transitioning'),\n  'in': computed.and('collapse', 'active'),\n\n  /**\n   * true if the component is currently transitioning\n   *\n   * @property transitioning\n   * @type boolean\n   * @protected\n   */\n  transitioning: false,\n\n  /**\n   * @property collapseSize\n   * @type number\n   * @protected\n   */\n  collapseSize: null,\n\n  /**\n   * The size of the element when collapsed. Defaults to 0.\n   *\n   * @property collapsedSize\n   * @type number\n   * @default 0\n   * @public\n   */\n  collapsedSize: 0,\n\n  /**\n   * The size of the element when expanded. When null the value is calculated automatically to fit the containing elements.\n   *\n   * @property expandedSize\n   * @type number\n   * @default null\n   * @public\n   */\n  expandedSize: null,\n\n  /**\n   * Usually the size (height) of the element is only set while transitioning, and reseted afterwards. Set to true to always set a size.\n   *\n   * @property resetSizeWhenNotCollapsing\n   * @type boolean\n   * @default true\n   * @private\n   */\n  resetSizeWhenNotCollapsing: true,\n\n  /**\n   * The direction (height/width) of the collapse animation.\n   * When setting this to 'width' you should also define custom CSS transitions for the width property, as the Bootstrap\n   * CSS does only support collapsible elements for the height direction.\n   *\n   * @property collapseDimension\n   * @type string\n   * @default 'height'\n   * @public\n   */\n  collapseDimension: 'height',\n\n  style: computed('collapseSize', function() {\n    let size = this.get('collapseSize');\n    let dimension = this.get('collapseDimension');\n    if (Ember.isEmpty(size)) {\n      return Ember.String.htmlSafe('');\n    }\n    return Ember.String.htmlSafe(`${dimension}: ${size}px`);\n  }),\n\n  /**\n   * Triggers the show transition\n   *\n   * @method show\n   * @protected\n   */\n  show() {\n    let complete = function() {\n        this.set('transitioning', false);\n        if (this.get('resetSizeWhenNotCollapsing')) {\n          this.set('collapseSize', null);\n        }\n        this.sendAction('didShow');\n      };\n\n    this.sendAction('willShow');\n\n    this.setProperties({\n      transitioning: true,\n      collapseSize: this.get('collapsedSize'),\n      active: true\n    });\n\n    if (!Ember.$.support.transition) {\n      return complete.call(this);\n    }\n\n    this.$()\n      .one('bsTransitionEnd', Ember.run.bind(this, complete))\n      // @todo: make duration configurable\n      .emulateTransitionEnd(350)\n    ;\n\n    Ember.run.next(this, function() {\n      if (!this.get('isDestroyed')) {\n        this.set('collapseSize', this.getExpandedSize('show'));\n      }\n    });\n  },\n\n  /**\n   * Get the size of the element when expanded\n   *\n   * @method getExpandedSize\n   * @param $action\n   * @return {Number}\n   * @private\n   */\n  getExpandedSize($action) {\n    let expandedSize = this.get('expandedSize');\n    if (Ember.isPresent(expandedSize)) {\n      return expandedSize;\n    }\n\n    let collapseElement = this.$();\n    let prefix = $action === 'show' ? 'scroll' : 'offset';\n    let measureProperty = Ember.String.camelize(`${prefix}-${this.get('collapseDimension')}`);\n    return collapseElement[0][measureProperty];\n  },\n\n  /**\n   * Triggers the hide transition\n   *\n   * @method hide\n   * @protected\n   */\n  hide() {\n\n    let complete = function() {\n        this.set('transitioning', false);\n        if (this.get('resetSizeWhenNotCollapsing')) {\n          this.set('collapseSize', null);\n        }\n        this.sendAction('didHide');\n      };\n\n    this.sendAction('willHide');\n\n    this.setProperties({\n      transitioning: true,\n      collapseSize: this.getExpandedSize('hide'),\n      active: false\n    });\n\n    if (!Ember.$.support.transition) {\n      return complete.call(this);\n    }\n\n    this.$()\n      .one('bsTransitionEnd', Ember.run.bind(this, complete))\n      // @todo: make duration configurable\n      .emulateTransitionEnd(350)\n    ;\n\n    Ember.run.next(this, function() {\n      if (!this.get('isDestroyed')) {\n        this.set('collapseSize', this.get('collapsedSize'));\n      }\n    });\n  },\n\n  _onCollapsedChange: observer('collapsed', function() {\n    let collapsed = this.get('collapsed');\n    let active = this.get('active');\n    if (collapsed !== active) {\n      return;\n    }\n    if (collapsed === false) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }),\n\n  _onInit: Ember.on('init', function() {\n    this.set('active', !this.get('collapsed'));\n  }),\n\n  _updateCollapsedSize: observer('collapsedSize', function() {\n    if (!this.get('resetSizeWhenNotCollapsing') && this.get('collapsed') && !this.get('collapsing')) {\n      this.set('collapseSize', this.get('collapsedSize'));\n    }\n  }),\n\n  _updateExpandedSize: observer('expandedSize', function() {\n    if (!this.get('resetSizeWhenNotCollapsing') && !this.get('collapsed') && !this.get('collapsing')) {\n      this.set('collapseSize', this.get('expandedSize'));\n    }\n  })\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-contextual-help.js":"import Ember from 'ember';\nimport getPosition from '../utils/get-position';\nimport getCalculatedOffset from '../utils/get-calculated-offset';\nimport getParent from '../utils/get-parent';\n\nconst {\n  assert,\n  Component,\n  computed,\n  guidFor,\n  isArray,\n  isBlank,\n  K,\n  observer,\n  run,\n  $,\n  run: {\n    later,\n    cancel,\n    bind,\n    schedule,\n    next\n  }\n} = Ember;\nconst eventNamespace = 'bs-contextual-help';\n\nconst InState = Ember.Object.extend({\n  hover: false,\n  focus: false,\n  click: false,\n  in: computed.or('hover', 'focus', 'click')\n});\n\n/**\n\n @class Components.ContextualHelp\n @namespace Components\n @extends Ember.Component\n @private\n */\nexport default Component.extend({\n  tagName: '',\n\n  /**\n   * @property title\n   * @type string\n   * @public\n   */\n  title: null,\n\n  /**\n   * How to position the tooltip/popover - top | bottom | left | right\n   *\n   * @property title\n   * @type string\n   * @default 'top'\n   * @public\n   */\n  placement: 'top',\n\n  _placement: computed.reads('placement'),\n\n  /**\n   * When `true` it will dynamically reorient the tooltip/popover. For example, if `placement` is \"left\", the\n   * tooltip/popover will display to the left when possible, otherwise it will display right.\n   *\n   * @property autoPlacement\n   * @type boolean\n   * @default false\n   * @public\n   */\n  autoPlacement: false,\n\n  /**\n   * You can programmatically show the tooltip/popover by setting this to `true`\n   *\n   * @property visible\n   * @type boolean\n   * @default false\n   * @public\n   */\n  visible: false,\n\n  /**\n   * @property inDom\n   * @type boolean\n   * @private\n   */\n  inDom: computed.reads('visible'),\n\n  /**\n   * Set to false to disable fade animations.\n   *\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * Used to apply Bootstrap's \"in\" class\n   *\n   * @property in\n   * @type boolean\n   * @default false\n   * @private\n   */\n  in: computed.reads('visible'),\n\n  /**\n   * Delay showing and hiding the tooltip/popover (ms). Individual delays for showing and hiding can be specified by using the\n   * `delayShow` and `delayHide` properties.\n   *\n   * @property delay\n   * @type number\n   * @default 0\n   * @public\n   */\n  delay: 0,\n\n  /**\n   * Delay showing the tooltip/popover. This property overrides the general delay set with the `delay` property.\n   *\n   * @property delayShow\n   * @type number\n   * @default 0\n   * @public\n   */\n  delayShow: computed.reads('delay'),\n\n  /**\n   * Delay hiding the tooltip/popover. This property overrides the general delay set with the `delay` property.\n   *\n   * @property delayHide\n   * @type number\n   * @default 0\n   * @public\n   */\n  delayHide: computed.reads('delay'),\n\n  hasDelayShow: computed.gt('delayShow', 0),\n  hasDelayHide: computed.gt('delayHide', 0),\n\n  /**\n   * The duration of the fade transition\n   *\n   * @property transitionDuration\n   * @type number\n   * @default 150\n   * @public\n   */\n  transitionDuration: 150,\n\n  /**\n   * Keeps the tooltip/popover within the bounds of this element when `autoPlacement` is true. Can be any valid jQuery selector.\n   *\n   * @property viewportSelector\n   * @type string\n   * @default 'body'\n   * @see viewportPadding\n   * @see autoPlacement\n   * @public\n   */\n  viewportSelector: 'body',\n\n  /**\n   * Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportSelector`.\n   *\n   * @property viewportPadding\n   * @type number\n   * @default 0\n   * @see viewportSelector\n   * @see autoPlacement\n   * @public\n   */\n  viewportPadding: 0,\n\n  /**\n   * Use CSS transitions when showing/hiding?\n   *\n   * @property usesTransition\n   * @type boolean\n   * @readonly\n   * @private\n   */\n  usesTransition: computed('fade', function() {\n    return Ember.$.support.transition && this.get('fade');\n  }),\n\n  /**\n   * The id of the overlay element.\n   *\n   * @property overlayId\n   * @type string\n   * @readonly\n   * @private\n   */\n  overlayId: computed(function() {\n    return `overlay-${guidFor(this)}`;\n  }),\n\n  /**\n   * The jQuery object of the overlay element.\n   *\n   * @property overlayElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  overlayElement: computed('overlayId', function() {\n    return Ember.$(`#${this.get('overlayId')}`);\n  }).volatile(),\n\n  /**\n   * The jQuery object of the arrow element.\n   *\n   * @property arrowElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  arrowElement: null,\n\n  /**\n   * The jQuery object of the viewport element.\n   *\n   * @property viewportElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  viewportElement: computed('viewportSelector', function() {\n    return $(this.get('viewportSelector'));\n  }),\n\n  /**\n   * The DOM element that triggers the tooltip/popover. By default it is the parent element of this component.\n   * You can set this to any jQuery selector to have any other element trigger the tooltip/popover.\n   * With the special value of \"parentView\" you can attach the tooltip/popover to the parent component's element.\n   *\n   * @property triggerElement\n   * @type string\n   * @public\n   */\n  triggerElement: null,\n\n  /**\n   * @property triggerTargetElement\n   * @type {jQuery}\n   * @private\n   */\n  triggerTargetElement: computed('triggerElement', function() {\n    let triggerElement = this.get('triggerElement');\n    let $el;\n\n    if (isBlank(triggerElement)) {\n      $el = getParent(this);\n    } else if (triggerElement === 'parentView') {\n      $el = $(this.get('parentView.element'));\n    } else {\n      $el = $(triggerElement);\n    }\n    assert('Trigger element for tooltip/popover must be present', $el.length === 1);\n    return $el;\n  }),\n\n  /**\n   * The event(s) that should trigger the tooltip/popover - click | hover | focus.\n   * You can set this to a single event or multiple events, given as an array or a string separated by spaces.\n   *\n   * @property triggerEvents\n   * @type array|string\n   * @default 'hover focus'\n   * @public\n   */\n  triggerEvents: 'hover focus',\n\n  _triggerEvents: computed('triggerEvents', function() {\n    let events = this.get('triggerEvents');\n    if (!isArray(events)) {\n      events = events.split(' ');\n    }\n\n    return events.map((event) => {\n        switch (event) {\n          case 'hover':\n            return ['mouseenter', 'mouseleave'];\n          case 'focus':\n            return ['focusin', 'focusout'];\n          default:\n            return event;\n        }\n      }\n    );\n  }),\n\n  /**\n   * If true component will render in place, rather than be wormholed.\n   *\n   * @property renderInPlace\n   * @type boolean\n   * @default false\n   * @public\n   */\n  renderInPlace: false,\n\n  /**\n   * @property _renderInPlace\n   * @type boolean\n   * @private\n   */\n  _renderInPlace: computed('renderInPlace', function() {\n    return this.get('renderInPlace') || typeof Ember.$ !== 'function' || Ember.$('#ember-bootstrap-modal-container').length === 0;\n  }),\n\n  /**\n   * Current hover state, 'in', 'out' or null\n   *\n   * @property hoverState\n   * @type string\n   * @private\n   */\n  hoverState: null,\n\n  /**\n   * Current state for events\n   *\n   * @property inState\n   * @type {InState}\n   * @private\n   */\n  inState: computed(function() {\n    return InState.create();\n  }),\n\n  /**\n   * Ember.run timer\n   *\n   * @property timer\n   * @private\n   */\n  timer: null,\n\n  /**\n   * This action is called immediately when the tooltip/popover is about to be shown.\n   *\n   * @event onShow\n   * @public\n   */\n  onShow: K,\n\n  /**\n   * This action will be called when the tooltip/popover has been made visible to the user (will wait for CSS transitions to complete).\n   *\n   * @event onShown\n   * @public\n   */\n  onShown: K,\n\n  /**\n   * This action is called immediately when the tooltip/popover is about to be hidden.\n   *\n   * @event onHide\n   * @public\n   */\n  onHide: K,\n\n  /**\n   * This action is called when the tooltip/popover has finished being hidden from the user (will wait for CSS transitions to complete).\n   *\n   * @event onHidden\n   * @public\n   */\n  onHidden: K,\n\n  /**\n   * Called when a show event has been received\n   *\n   * @method enter\n   * @param e\n   * @private\n   */\n  enter(e) {\n    if (e) {\n      let eventType = e.type === 'focusin' ? 'focus' : 'hover';\n      this.get('inState').set(eventType, true);\n    }\n\n    if (this.get('in') || this.get('hoverState') === 'in') {\n      this.set('hoverState', 'in');\n      return;\n    }\n\n    cancel(this.timer);\n\n    this.set('hoverState', 'in');\n\n    if (!this.get('hasDelayShow')) {\n      return this.show();\n    }\n\n    this.timer = later(this, function() {\n      if (this.get('hoverState') === 'in') {\n        this.show();\n      }\n    }, this.get('delayShow'));\n  },\n\n  /**\n   * Called when a hide event has been received\n   *\n   * @method leave\n   * @param e\n   * @private\n   */\n  leave(e) {\n    if (e) {\n      let eventType = e.type === 'focusout' ? 'focus' : 'hover';\n      this.get('inState').set(eventType, false);\n    }\n\n    if (this.get('inState.in')) {\n      return;\n    }\n\n    cancel(this.timer);\n\n    this.set('hoverState', 'out');\n\n    if (!this.get('hasDelayHide')) {\n      return this.hide();\n    }\n\n    this.timer = later(this, function() {\n      if (this.get('hoverState') === 'out') {\n        this.hide();\n      }\n    }, this.get('delayHide'));\n  },\n\n  /**\n   * Called for a click event\n   *\n   * @method toggle\n   * @param e\n   * @private\n   */\n  toggle(e) {\n    if (e) {\n      this.get('inState').toggleProperty('click');\n      if (this.get('inState.in')) {\n        this.enter();\n      } else {\n        this.leave();\n      }\n    } else {\n      if (this.get('in')) {\n        this.leave();\n      } else {\n        this.enter();\n      }\n    }\n  },\n\n  /**\n   * Show the tooltip/popover\n   *\n   * @method show\n   * @private\n   */\n  show() {\n    if (this.get('isDestroyed')) {\n      return;\n    }\n\n    if (false === this.get('onShow')(this)) {\n      return;\n    }\n\n    // this waits for the tooltip/popover element to be created. when animating a wormholed tooltip/popover we need to wait until\n    // ember-wormhole has moved things in the DOM for the animation to be correct, so use Ember.run.next in this case\n    let delayFn = !this.get('_renderInPlace') && this.get('fade') ? next : function(target, fn) {\n      schedule('afterRender', target, fn);\n    };\n\n    this.set('inDom', true);\n    delayFn(this, this._show);\n  },\n\n  _show(skipTransition = false) {\n    let $element = this.get('triggerTargetElement');\n    let placement = this.get('placement');\n\n    // this.$element.attr('aria-describedby', tipId) @todo ?\n\n    let $tip = this.get('overlayElement');\n    $tip.css({ top: 0, left: 0, display: 'block' });\n\n    let pos = getPosition($element);\n    let actualWidth = $tip[0].offsetWidth;\n    let actualHeight = $tip[0].offsetHeight;\n\n    if (this.get('autoPlacement')) {\n      let viewportDim = getPosition(this.get('viewportElement'));\n\n      placement = placement === 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :\n        placement === 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :\n          placement === 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :\n            placement === 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :\n              placement;\n    }\n\n    this.set('_placement', placement);\n\n    let calculatedOffset = getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n    this.applyPlacement(calculatedOffset, placement);\n\n    function tooltipShowComplete() {\n      if (this.get('isDestroyed')) {\n        return;\n      }\n      let prevHoverState = this.get('hoverState');\n\n      this.get('onShown')(this);\n      this.set('hoverState', null);\n\n      if (prevHoverState === 'out') {\n        this.leave();\n      }\n    }\n\n    if (skipTransition === false && this.get('usesTransition')) {\n      this.get('overlayElement')\n        .one('bsTransitionEnd', bind(this, tooltipShowComplete))\n        .emulateTransitionEnd(this.get('transitionDuration'));\n    } else {\n      tooltipShowComplete.call(this);\n    }\n  },\n\n  /**\n   * Position the tooltip/popover\n   *\n   * @method applyPlacement\n   * @param offset\n   * @param placement\n   * @private\n   */\n  applyPlacement(offset, placement) {\n    let $tip = this.get('overlayElement');\n    let width = $tip[0].offsetWidth;\n    let height = $tip[0].offsetHeight;\n\n    // manually read margins because getBoundingClientRect includes difference\n    let marginTop = parseInt($tip.css('margin-top'), 10);\n    let marginLeft = parseInt($tip.css('margin-left'), 10);\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop)) {\n      marginTop = 0;\n    }\n    if (isNaN(marginLeft)) {\n      marginLeft = 0;\n    }\n\n    offset.top += marginTop;\n    offset.left += marginLeft;\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using(props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        });\n      }\n    }, offset), 0);\n\n    this.set('in', true);\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    let actualWidth = $tip[0].offsetWidth;\n    let actualHeight = $tip[0].offsetHeight;\n\n    if (placement === 'top' && actualHeight !== height) {\n      offset.top = offset.top + height - actualHeight;\n    }\n\n    let delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n    if (delta.left) {\n      offset.left += delta.left;\n    } else {\n      offset.top += delta.top;\n    }\n\n    let isVertical = /top|bottom/.test(placement);\n    let arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n    let arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n    $tip.offset(offset);\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);\n  },\n\n  /**\n   * @method getViewportAdjustedDelta\n   * @param placement\n   * @param pos\n   * @param actualWidth\n   * @param actualHeight\n   * @returns {{top: number, left: number}}\n   * @private\n   */\n  getViewportAdjustedDelta(placement, pos, actualWidth, actualHeight) {\n    let delta = { top: 0, left: 0 };\n    let $viewport = this.get('viewportElement');\n    if (!$viewport) {\n      return delta;\n    }\n\n    let viewportPadding = this.get('viewportPadding');\n    let viewportDimensions = getPosition($viewport);\n\n    if (/right|left/.test(placement)) {\n      let topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\n      let bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset;\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n      }\n    } else {\n      let leftEdgeOffset = pos.left - viewportPadding;\n      let rightEdgeOffset = pos.left + viewportPadding + actualWidth;\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset;\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n      }\n    }\n\n    return delta;\n  },\n\n  /**\n   * Position the tooltip/popover's arrow\n   *\n   * @method replaceArrow\n   * @param delta\n   * @param dimension\n   * @param isVertical\n   * @private\n   */\n  replaceArrow(delta, dimension, isVertical) {\n    this.get('arrowElement')\n      .css(isVertical ? 'left' : 'top', `${50 * (1 - delta / dimension)}%`)\n      .css(isVertical ? 'top' : 'left', '');\n  },\n\n  /**\n   * Hide the tooltip/popover\n   *\n   * @method hide\n   * @private\n   */\n  hide() {\n    if (this.get('isDestroyed')) {\n      return;\n    }\n\n    if (false === this.get('onHide')(this)) {\n      return;\n    }\n\n    function tooltipHideComplete() {\n      if (this.get('isDestroyed')) {\n        return;\n      }\n      if (this.get('hoverState') !== 'in') {\n        this.set('inDom', false);\n      }\n      this.get('onHidden')(this);\n    }\n\n    this.set('in', false);\n\n    if (this.get('usesTransition')) {\n      this.get('overlayElement')\n        .one('bsTransitionEnd', bind(this, tooltipHideComplete))\n        .emulateTransitionEnd(this.get('transitionDuration'));\n    } else {\n      tooltipHideComplete.call(this);\n    }\n\n    this.set('hoverState', null);\n  },\n\n  /**\n   * @method addListeners\n   * @private\n   */\n  addListeners() {\n    let $target = this.get('triggerTargetElement');\n\n    this.get('_triggerEvents')\n      .forEach((event) => {\n        if (isArray(event)) {\n          let [inEvent, outEvent] = event;\n          $target.on(`${inEvent}.${eventNamespace}`, run.bind(this, this.enter));\n          $target.on(`${outEvent}.${eventNamespace}`, run.bind(this, this.leave));\n        } else {\n          $target.on(`${event}.${eventNamespace}`, run.bind(this, this.toggle));\n        }\n      });\n  },\n\n  /**\n   * @method removeListeners\n   * @private\n   */\n  removeListeners() {\n    this.get('triggerTargetElement')\n      .off(`.${eventNamespace}`);\n  },\n\n  didInsertElement() {\n    this._super(...arguments);\n    this.addListeners();\n    if (this.get('visible')) {\n      next(this, this._show, true);\n    }\n  },\n\n  willRemoveElement() {\n    this._super(...arguments);\n    this.removeListeners();\n  },\n\n  _watchVisible: observer('visible', function() {\n    if (this.get('visible')) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-dropdown-button.js":"import Button from 'ember-bootstrap/components/bs-button';\nimport DropdownToggle from 'ember-bootstrap/mixins/dropdown-toggle';\n\n/**\n Button component with that can act as a dropdown toggler.\n\n See [Components.Dropdown](Components.Dropdown.html) for examples.\n\n @class DropdownButton\n @namespace Components\n @extends Components.Button\n @uses Mixins.DropdownToggle\n @public\n */\nexport default Button.extend(DropdownToggle);\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-dropdown.js":"import Ember from 'ember';\nimport toggleButton from 'ember-bootstrap/components/bs-dropdown-button';\nimport ComponentParent from 'ember-bootstrap/mixins/component-parent';\n\nconst { computed, observer } = Ember;\n\n/**\n Bootstrap style dropdown menus, consisting of a toggle element, and the dropdown menu itself.\n See http://getbootstrap.com/components/#dropdowns\n\n Use this component together with two sub components, a dropdown toggle (`Components.DropdownToggle` or\n `Components.DropdownButton` component) and a dropdown menu (`Components.DropdownMenu`) component:\n\n ```hbs\n <nav class=\"navbar navbar-default navbar-static\">\n   <div class=\"container-fluid\">\n     <ul class=\"nav navbar-nav\">\n       {{#bs-dropdown tagName=\"li\"}}\n         {{#bs-dropdown-toggle}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-toggle}}\n         {{#bs-dropdown-menu}}\n           <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n           <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n         {{/bs-dropdown-menu}}\n       {{/bs-dropdown}}\n     </ul>\n   </div>\n </nav>\n ```\n\n ### Button dropdowns\n\n To use a button as the dropdown toggle element (see http://getbootstrap.com/components/#btn-dropdowns), use the\n `Components.DropdownButton` component as the toggle:\n\n ```hbs\n {{#bs-dropdown}}\n   {{#bs-dropdown-button}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-button}}\n   {{#bs-dropdown-menu}}\n     <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n     <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n   {{/bs-dropdown-menu}}\n {{/bs-dropdown}}\n ```\n\n It has all the functionality of a `Components.Button` with additional dropdown support.\n\n ### Split button dropdowns\n\n To have a regular button with a dropdown button as in http://getbootstrap.com/components/#btn-dropdowns-split, use a\n `Components.Button` component and a `Components.DropdownButton`:\n\n ```hbs\n {{#bs-dropdown}}\n   {{#bs-button}}Dropdown{{/bs-button}}\n   {{#bs-dropdown-button}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-button}}\n   {{#bs-dropdown-menu}}\n     <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n     <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n   {{/bs-dropdown-menu}}\n {{/bs-dropdown}}\n ```\n\n ### Dropup style\n\n Set the `direction` property to \"up\" to switch to a \"dropup\" style:\n\n ```hbs\n {{#bs-dropdown direction=\"up\"}}\n   ...\n {{/bs-dropdown}}\n ```\n\n @class Dropdown\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend(ComponentParent, {\n  classNameBindings: ['open', 'containerClass'],\n\n  /**\n   * This property reflects the state of the dropdown, whether it is open or closed.\n   *\n   * @property open\n   * @default false\n   * @type boolean\n   * @public\n   */\n  open: false,\n\n  /**\n   * By default clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.\n   *\n   * @property closeOnMenuClick\n   * @default true\n   * @type boolean\n   * @public\n   */\n  closeOnMenuClick: true,\n\n  /**\n   * jQuery click event name, namespaced to this component's instance to prevent interference between multiple dropdowns.\n   *\n   * @property clickEventName\n   * @type string\n   * @private\n   */\n  clickEventName: undefined,\n\n  /**\n   * By default the dropdown menu will expand downwards. Set to 'up' to expand upwards.\n   *\n   * @property direction\n   * @type string\n   * @default 'down'\n   * @public\n   */\n  direction: 'down',\n\n  /**\n   * A computed property to generate the suiting class for the dropdown container, either \"dropdown\", \"dropup\" or \"btn-group\".\n   *\n   * @property containerClass\n   * @type string\n   * @readonly\n   * @private\n   */\n  containerClass: computed('toggleType', 'direction', function() {\n    if (this.get('toggleType') === 'button') {\n      return this.get('direction') === 'up' ? 'btn-group dropup' : 'btn-group';\n    } else {\n      return this.get('direction') === 'up' ? 'dropup' : 'dropdown';\n    }\n  }),\n\n  /**\n   * This property is \"button\" if the toggle element is an instance of [Components.DropdownButton](Components.DropdownButton.html), otherwise \"toggle\".\n   *\n   * @property toggleType\n   * @type string\n   * @readonly\n   * @protected\n   */\n  toggleType: computed('children.[]', function() {\n    if (this.get('children').any(function(view) {\n        return view instanceof toggleButton;\n      })) {\n      return 'button';\n    }\n    return 'toggle';\n  }),\n\n  actions: {\n    toggleDropdown() {\n      this.toggleProperty('open');\n    },\n\n    openDropdown() {\n      this.set('open', true);\n    },\n\n    closeDropdown() {\n      this.set('open', false);\n    }\n  },\n\n  handleClickEvents: observer('open', function() {\n    if (this.get('open')) {\n      Ember.$(document).on(this.clickEventName, Ember.run.bind(this, this.closeOnClickHandler));\n    } else {\n      Ember.$(document).off(this.clickEventName);\n    }\n  }),\n\n  willDestroyElement() {\n    this._super();\n    Ember.$(document).off(this.clickEventName);\n  },\n\n  init() {\n    this._super();\n    // click event name that is namespaced to our component instance, so multiple dropdowns do not interfere\n    // with each other\n    this.clickEventName = `click.${this.get('elementId')}`;\n  },\n\n  /**\n   * Handler for click events to close the dropdown\n   *\n   * @method closeOnClickHandler\n   * @param e\n   * @protected\n   */\n  closeOnClickHandler(e) {\n    let $target = Ember.$(e.target);\n    if (!this.get('isDestroyed') &&\n      $target.closest(this.$().find('.dropdown-toggle')).length === 0 &&\n      ($target.closest(this.$().find('.dropdown-menu')).length === 0 || this.get('closeOnMenuClick'))) {\n      this.set('open', false);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-dropdown-menu.js":"import Ember from 'ember';\n\nconst { computed } = Ember;\n\n/**\n Component for the dropdown menu.\n\n See [Components.Dropdown](Components.Dropdown.html) for examples.\n\n @class DropdownMenu\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n\n  /**\n   * Defaults to a `<ul>` tag. Change for other types of dropdown menus.\n   *\n   * @property tagName\n   * @type string\n   * @default ul\n   * @public\n   */\n  tagName: 'ul',\n  classNames: ['dropdown-menu'],\n  classNameBindings: ['alignClass'],\n\n  /**\n   * @property ariaRole\n   * @default menu\n   * @type string\n   * @protected\n   */\n  ariaRole: 'menu',\n\n  /**\n   * Alignment of the menu, either \"left\" or \"right\"\n   *\n   * @property align\n   * @type string\n   * @default left\n   * @public\n   */\n  align: 'left',\n\n  alignClass: computed('align', function() {\n    if (this.get('align') !== 'left') {\n      return `dropdown-menu-${this.get('align')}`;\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-dropdown-toggle.js":"import Ember from 'ember';\nimport DropdownToggle from 'ember-bootstrap/mixins/dropdown-toggle';\n\nconst { computed } = Ember;\n\n/**\n Anchor element that triggers the parent dropdown to open.\n Use [Components.DropdownButton](Components.DropdownButton.html) if you want a button instead of an anchor tag.\n\n See [Components.Dropdown](Components.Dropdown.html) for examples.\n\n\n @class DropdownToggle\n @namespace Components\n @extends Ember.Component\n @uses Mixins.DropdownToggle\n @public\n */\nexport default Ember.Component.extend(DropdownToggle, {\n  /**\n   * Defaults to a `<a>` tag. Change for other types of dropdown toggles.\n   *\n   * @property tagName\n   * @type string\n   * @default a\n   * @public\n   */\n  tagName: 'a',\n\n  attributeBindings: ['href'],\n\n  /**\n   * Computed property to generate a `href=\"#\"` attribute when `tagName` is \"a\".\n   *\n   * @property href\n   * @type string\n   * @readonly\n   * @protected\n   */\n  href: computed('tagName', function() {\n    if (this.get('tagName').toUpperCase() === 'A') {\n      return '#';\n    }\n  }),\n\n  click(e) {\n    e.preventDefault();\n    this.sendAction();\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-form-element.js":"import Ember from 'ember';\nimport FormGroup from 'ember-bootstrap/components/bs-form-group';\nimport Form from 'ember-bootstrap/components/bs-form';\nimport ComponentChild from 'ember-bootstrap/mixins/component-child';\n\nconst { computed, defineProperty, isArray, observer, on, run, warn } = Ember;\n\nconst nonTextFieldControlTypes = Ember.A([\n  'checkbox',\n  'select',\n  'textarea'\n]);\n\n/**\n Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.\n\n ### Form layout\n\n The appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily\n create forms without coding the default Bootstrap form markup by hand:\n\n ```hbs\n {{#bs-form formLayout=\"horizontal\" action=\"submit\"}}\n   {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n   {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" value=password}}\n   {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" value=rememberMe}}\n   {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n {{/bs-form}}\n ```\n\n ### Form validation\n\n In the following example the control elements of the three form elements value will be bound to the properties\n (given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):\n\n ```hbs\n {{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n   {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n   {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n   {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n   {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n {{/bs-form}}\n ```\n\n By using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic\n form validation, given that your `model` has a supported means of validating itself.\n See [Components.Form](Components.Form.html) for details on how to enable form validation.\n\n In the example above the `model` was our controller itself, so the control elements were bound to the appropriate\n properties of our controller. A controller implementing validations on those properties could look like this:\n\n ```js\n import Ember from 'ember';\n import EmberValidations from 'ember-validations';\n\n export default Ember.Controller.extend(EmberValidations,{\n   email: null,\n   password: null,\n   rememberMe: false,\n   validations: {\n     email: {\n       presence: true,\n       format: {\n         with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n       }\n     },\n     password: {\n       presence: true,\n       length: { minimum: 6, maximum: 10}\n     },\n     comments: {\n       length: { minimum: 5, maximum: 20}\n     }\n   }\n });\n ```\n\n If the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the\n control element or the containing `Components.Form` was submitted with its `model` failing validation) and there are\n validation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see\n http://getbootstrap.com/css/#forms-control-validation) is applied:\n\n * `validation` is set to 'error', which will set the `has-error` CSS class\n * the `errorIcon` feedback icon is displayed if `controlType` is a text field\n * the validation messages are displayed as Bootstrap `help-block`s\n\n The same applies for warning messages, if the used validation library supports this. (Currently only\n [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))\n\n As soon as the validation is successful again...\n\n * `validation` is set to 'success', which will set the `has-success` CSS class\n * the `successIcon` feedback icon is displayed if `controlType` is a text field\n * the validation messages are removed\n\n ### Custom controls\n\n Apart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply\n by invoking the component with a block template. Use whatever control you might want, for example a select-2 component\n (from the [ember-select-2 addon](https://istefo.github.io/ember-select-2)):\n\n ```hbs\n {{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n   {{#bs-form-element label=\"Select-2\" property=\"gender\" useIcons=false as |value id validationState|}}\n     {{select-2 id=id content=genderChoices optionLabelPath=\"label\" value=value searchEnabled=false}}\n   {{/bs-form-element}}\n {{/bs-form}}\n ```\n\n If your custom control does not render an input element, you should set `useIcons` to `false` since bootstrap only supports\n feedback icons with textual `<input class=\"form-control\">` elements.\n\n @class FormElement\n @namespace Components\n @extends Components.FormGroup\n @public\n */\nexport default FormGroup.extend(ComponentChild, {\n  classNameBindings: ['disabled:is-disabled', 'required:is-required', 'isValidating'],\n\n  /**\n   * Text to display within a `<label>` tag.\n   *\n   * You should include a label for every form input cause otherwise screen readers\n   * will have trouble with your forms. Use `invisibleLabel` property if you want\n   * to hide them.\n   *\n   * @property label\n   * @type string\n   * @public\n   */\n  label: null,\n\n  /**\n   * Controls label visibilty by adding 'sr-only' class.\n   *\n   * @property invisibleLabel\n   * @type boolean\n   * @public\n   */\n  invisibleLabel: false,\n\n  /**\n   * The type of the control widget.\n   * Supported types:\n   *\n   * * 'text'\n   * * 'checkbox'\n   * * 'select' (deprecated)\n   * * 'textarea'\n   * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input\n   * types like 'email'), and the same layout as the 'text' type\n   *\n   * @property controlType\n   * @type string\n   * @public\n   */\n  controlType: 'text',\n\n  /**\n   * The value of the control element is bound to this property. You can bind it to some controller property to\n   * get/set the control element's value:\n   *\n   * ```hbs\n   * {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n   * ```\n   *\n   * Note: you loose the ability to validate this form element by directly binding to its value. It is recommended\n   * to use the `property` feature instead.\n   *\n   *\n   * @property value\n   * @public\n   */\n  value: null,\n\n  /**\n   The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this\n   form element should represent. The control element's value will automatically be bound to the model property's\n   value.\n\n   Using this property enables form validation on this element.\n\n   @property property\n   @type string\n   @public\n   */\n  property: null,\n\n  /**\n   * Control element's HTML5 placeholder attribute\n   *\n   * @property placeholder\n   * @type string\n   * @public\n   */\n  placeholder: null,\n\n  /**\n   * Control element's HTML5 disabled attribute\n   *\n   * @property disabled\n   * @type boolean\n   * @public\n   */\n  disabled: false,\n\n  /**\n   * Control element's HTML5 required attribute\n   *\n   * @property required\n   * @type boolean\n   * @public\n   */\n  required: false,\n\n  /**\n   * Control element's HTML5 autofocus attribute\n   *\n   * @property autofocus\n   * @type boolean\n   * @public\n   */\n  autofocus: false,\n\n  /**\n   * Control element's name attribute\n   *\n   * @property name\n   * @type string\n   * @public\n   */\n  name: null,\n\n  /**\n   * An array of objects containing the selection of choices for multiple choice style form controls, e.g. select\n   * boxes.\n   *\n   * ```hbs\n   * {{bs-form-element controlType=\"select\" choices=countries choiceLabelProperty=\"name\" choiceValueProperty=\"id\" label=\"Country\" value=selectedCountry}}\n   * ```\n   *\n   * Be sure to also set the `choiceValueProperty` and `choiceLabelProperty` properties.\n   *\n   * @property choices\n   * @type array\n   * @public\n   */\n  choices: Ember.A(),\n\n  /**\n   * The property of the `choices` array of objects, containing the value of the choice, e.g. the select box option.\n   *\n   * @property choiceValueProperty\n   * @type string\n   * @public\n   */\n  choiceValueProperty: null,\n\n  /**\n   * The property of the `choices` array of objects, containing the label of the choice, e.g. the select box option.\n   *\n   * @property choiceLabelProperty\n   * @type string\n   * @public\n   */\n  choiceLabelProperty: null,\n\n  /**\n   * Textarea's rows attribute (ignored for other `controlType`s)\n   *\n   * @property rows\n   * @type number\n   * @default 5\n   * @public\n   */\n  rows: 5,\n\n  /**\n   * Textarea's cols attribute (ignored for other `controlType`s)\n   *\n   * @property cols\n   * @type number\n   * @public\n   */\n  cols: null,\n\n  /**\n   * The model used for validation. Defaults to the parent `Components.Form`'s `model`\n   *\n   * @property model\n   * @public\n   */\n  model: computed.reads('form.model'),\n\n  /**\n   * The array of error messages from the `model`'s validation.\n   *\n   * @property errors\n   * @type array\n   * @protected\n   */\n  errors: null,\n\n  /**\n   * @property hasErrors\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasErrors: computed.gt('errors.length', 0),\n\n  /**\n   * The array of warning messages from the `model`'s validation.\n   *\n   * @property errors\n   * @type array\n   * @protected\n   */\n  warnings: null,\n\n  /**\n   * @property hasWarnings\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasWarnings: computed.gt('warnings.length', 0),\n\n  /**\n   * The array of validation messages (either errors or warnings) rom the `model`'s validation.\n   *\n   * @property validationMessages\n   * @type array\n   * @protected\n   */\n  validationMessages: computed('hasErrors', 'hasWarnings', 'errors.[]', 'warnings.[]', function() {\n    if (this.get('hasErrors')) {\n      return this.get('errors');\n    }\n    if (this.get('hasWarnings')) {\n      return this.get('warnings');\n    }\n    return null;\n  }),\n\n  /**\n   * @property hasValidationMessages\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasValidationMessages: computed.gt('validationMessages.length', 0),\n\n  /**\n   * @property hasValidator\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasValidator: computed.notEmpty('model.validate'),\n\n  /**\n   * Set a validating state for async validations\n   *\n   * @property isValidating\n   * @type boolean\n   * @default false\n   * @public\n   */\n  isValidating: false,\n\n  /**\n   * If `true` form validation markup is rendered (requires a validatable `model`).\n   *\n   * @property showValidation\n   * @type boolean\n   * @default false\n   * @public\n   */\n  showValidation: false,\n\n  /**\n   * @property showValidationMessages\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  showValidationMessages: computed.and('showValidation', 'hasValidationMessages'),\n\n  /**\n   * Event or list of events which enable form validation markup rendering.\n   * Supported events: ['focusOut', 'change']\n   *\n   * @property showValidationOn\n   * @type string|array\n   * @default ['focusOut']\n   * @public\n   */\n  showValidationOn: ['focusOut'],\n\n  /**\n   * @property _showValidationOn\n   * @type array\n   * @readonly\n   * @private\n   */\n  _showValidationOn: computed('showValidationOn', function() {\n    let showValidationOn = this.get('showValidationOn');\n\n    if (isArray(showValidationOn)) {\n      return showValidationOn;\n    }\n\n    if (typeof showValidationOn.toString === 'function') {\n      return [showValidationOn];\n    }\n\n    warn('showValidationOn must be a String or an Array');\n    return [];\n  }),\n\n  /**\n   * @method showValidationOnHandler\n   * @private\n   */\n  showValidationOnHandler(event) {\n    if (this.get('_showValidationOn').indexOf(event) !== -1) {\n      this.set('showValidation', true);\n    }\n  },\n\n  /**\n   * @property showErrors\n   * @type boolean\n   * @readonly\n   * @deprecated\n   * @protected\n   */\n  showErrors: computed.deprecatingAlias('showValidationMessages'),\n\n  /**\n   * The validation (\"error\" or \"success\") or null if no validation is to be shown. Automatically computed from the\n   * models validation state.\n   *\n   * @property validation\n   * @readonly\n   * @type string\n   * @protected\n   */\n  validation: computed('hasErrors', 'hasWarnings', 'hasValidator', 'showValidation', 'isValidating', 'disabled', function() {\n    if (!this.get('showValidation') || !this.get('hasValidator') || this.get('isValidating') || this.get('disabled')) {\n      return null;\n    }\n    return this.get('hasErrors') ? 'error' : (this.get('hasWarnings') ? 'warning' : 'success');\n  }),\n\n  /**\n   * @property hasLabel\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasLabel: computed.notEmpty('label'),\n\n  /**\n   * True for text field `controlType`s\n   *\n   * @property useIcons\n   * @type boolean\n   * @readonly\n   * @public\n   */\n  useIcons: computed('controlType', function() {\n    return !nonTextFieldControlTypes.includes(this.get('controlType'));\n  }),\n\n  /**\n   * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):\n   *\n   * * 'horizontal'\n   * * 'vertical'\n   * * 'inline'\n   *\n   * Defaults to the parent `form`'s `formLayout` property.\n   *\n   * @property formLayout\n   * @type string\n   * @public\n   */\n  formLayout: computed.alias('form.formLayout'),\n\n  /**\n   * @property isVertical\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  isVertical: computed.equal('formLayout', 'vertical'),\n\n  /**\n   * @property isHorizontal\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  isHorizontal: computed.equal('formLayout', 'horizontal'),\n\n  /**\n   * @property isInline\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  isInline: computed.equal('formLayout', 'inline'),\n\n  /**\n   * The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same\n   * property of the parent form. The corresponding grid class for form controls is automatically computed.\n   *\n   * @property horizontalLabelGridClass\n   * @type string\n   * @default 'col-md-4'\n   * @public\n   */\n  horizontalLabelGridClass: computed.oneWay('form.horizontalLabelGridClass'),\n\n  /**\n   * Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.\n   *\n   * @property horizontalInputGridClass\n   * @type string\n   * @readonly\n   * @protected\n   */\n  horizontalInputGridClass: computed('horizontalLabelGridClass', function() {\n    let parts = this.get('horizontalLabelGridClass').split('-');\n    Ember.assert('horizontalInputGridClass must match format bootstrap grid column class', parts.length === 3);\n    parts[2] = 12 - parts[2];\n    return parts.join('-');\n  }),\n\n  /**\n   * Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout\n   * form, that have no label.\n   *\n   * @property horizontalInputOffsetGridClass\n   * @type string\n   * @readonly\n   * @protected\n   */\n  horizontalInputOffsetGridClass: computed('horizontalLabelGridClass', function() {\n    let parts = this.get('horizontalLabelGridClass').split('-');\n    parts.splice(2, 0, 'offset');\n    return parts.join('-');\n  }),\n\n  /**\n   * ID for input field and the corresponding label's \"for\" attribute\n   *\n   * @property formElementId\n   * @type string\n   * @private\n   */\n  formElementId: computed('elementId', function() {\n    let elementId = this.get('elementId');\n    return `${elementId}-field`;\n  }),\n\n  /**\n   * Reference to the parent `Components.Form` class.\n   *\n   * @property form\n   * @protected\n   */\n  form: computed(function() {\n    return this.nearestOfType(Form);\n  }),\n\n  formElementTemplate: computed('formLayout', 'controlType', function() {\n    let formLayout = this.getWithDefault('formLayout', 'vertical');\n    let inputLayout;\n    let controlType = this.get('controlType');\n\n    switch (true) {\n      case nonTextFieldControlTypes.includes(controlType):\n        inputLayout = controlType;\n        break;\n      default:\n        inputLayout = 'default';\n    }\n\n    return `components/form-element/${formLayout}/${inputLayout}`;\n  }),\n\n  /**\n   * Setup validation properties. This method acts as a hook for external validation\n   * libraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.\n   *\n   * @method setupValidations\n   * @protected\n   */\n  setupValidations: Ember.K,\n\n  /**\n   * Listen for focusOut events from the control element to automatically set `showValidation` to true to enable\n   * form validation markup rendering if `showValidationsOn` contains `focusOut`.\n   *\n   * @event focusOut\n   * @private\n   */\n  focusOut() {\n    this.showValidationOnHandler('focusOut');\n  },\n\n  /**\n   * Listen for change events from the control element to automatically set `showValidation` to true to enable\n   * form validation markup rendering if `showValidationsOn` contains `change`.\n   *\n   * @event change\n   * @private\n   */\n  change() {\n    this.showValidationOnHandler('change');\n  },\n\n  init() {\n    this._super();\n    if (!Ember.isBlank(this.get('property'))) {\n      defineProperty(this, 'value', computed.alias(`model.${this.get('property')}`));\n      this.setupValidations();\n    }\n  },\n\n  /*\n   * adjust feedback icon position\n   *\n   * Bootstrap documentation:\n   *  Manual positioning of feedback icons is required for [...] input groups\n   *  with an add-on on the right. [...] For input groups, adjust the right\n   *  value to an appropriate pixel value depending on the width of your addon.\n   */\n  adjustFeedbackIcons: on('didInsertElement', observer('hasFeedback', 'formLayout', function() {\n    run.scheduleOnce('afterRender', () => {\n      // validation state icons are only shown if form element has feedback\n      if (this.get('hasFeedback') && !this.get('isDestroying')) {\n        // form group element has\n        this.$()\n          // an input-group\n          .has('.input-group')\n          // an addon or button on right si de\n          .has('.input-group input + .input-group-addon, .input-group input + .input-group-btn')\n          // an icon showing validation state\n          .has('.form-control-feedback')\n          .each((i, formGroups) => {\n            // clear existing adjustment\n            this.$('.form-control-feedback').css('right', '');\n            let feedbackIcon = this.$('.form-control-feedback', formGroups);\n            let defaultPositionString = feedbackIcon.css('right');\n            Ember.assert(\n              defaultPositionString.substr(-2) === 'px',\n              '.form-control-feedback css right units other than px are not supported'\n            );\n            let defaultPosition = parseInt(\n              defaultPositionString.substr(0, defaultPositionString.length - 2)\n            );\n            // Bootstrap documentation:\n            //  We do not support multiple add-ons (.input-group-addon or .input-group-btn) on a single side.\n            // therefore we could rely on having only one input-group-addon or input-group-btn\n            let inputGroupWidth = this.$('input + .input-group-addon, input + .input-group-btn', formGroups).outerWidth();\n            let adjustedPosition = defaultPosition + inputGroupWidth;\n\n            feedbackIcon.css('right', adjustedPosition);\n          });\n      }\n    });\n  }))\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-form-group.js":"import Ember from 'ember';\nimport Config from 'ember-bootstrap/config';\n\nconst { computed } = Ember;\n\n/**\n This component renders a `<div class=\"form-group\">` element, with support for validation states and feedback icons.\n Use as a block level component:\n\n ```hbs\n {{#bs-form-group validation=firstNameValidation}}\n   <label class=\"control-label\">First name</label>\n   {{bs-input type=\"text\" value=firstname}}\n {{/bs-form-group}}\n ```\n\n If the `validation` property is set to some state (usually Bootstrap's predefined states \"success\",\n \"warning\" or \"error\"), the appropriate styles will be added, together with a feedback icon.\n See http://getbootstrap.com/css/#forms-control-validation\n\n @class FormGroup\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n\n  classNames: ['form-group'],\n  classNameBindings: ['validationClass', 'hasFeedback'],\n\n  /**\n   * Whether to show validation state icons.\n   * See http://getbootstrap.com/css/#forms-control-validation\n   *\n   * @property useIcons\n   * @type boolean\n   * @default true\n   * @public\n   */\n  useIcons: true,\n\n  /**\n   * Computed property which is true if the form group is in a validation state\n   *\n   * @property hasValidation\n   * @type boolean\n   * @public\n   * @readonly\n   */\n  hasValidation: computed.notEmpty('validation'),\n\n  /**\n   * Computed property which is true if the form group is showing a validation icon\n   *\n   * @property hasFeedback\n   * @type boolean\n   * @public\n   * @readonly\n   */\n  hasFeedback: computed.and('hasValidation', 'useIcons', 'hasIconForValidationState'),\n\n  /**\n   * The icon classes to be used for a feedback icon in a \"success\" validation state.\n   * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\n   * rendered if `useIcons` is false.\n   *\n   * You can change this globally by setting the `formValidationSuccessIcon` property of\n   * the ember-bootstrap configuration in your config/environment.js file. If your are\n   * using FontAwesome for example:\n   *\n   * ```js\n   * ENV['ember-bootstrap'] = {\n     *   formValidationSuccessIcon: 'fa fa-check'\n     * }\n   * ```\n   *\n   * @property successIcon\n   * @type string\n   * @default 'glyphicon glyphicon-ok'\n   * @public\n   */\n  successIcon: Config.formValidationSuccessIcon,\n\n  /**\n   * The icon classes to be used for a feedback icon in a \"error\" validation state.\n   * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\n   * rendered if `useIcons` is false.\n   *\n   * You can change this globally by setting the `formValidationErrorIcon` property of\n   * the ember-bootstrap configuration in your config/environment.js file. If your are\n   * using FontAwesome for example:\n   *\n   * ```js\n   * ENV['ember-bootstrap'] = {\n     *   formValidationErrorIcon: 'fa fa-times'\n     * }\n   * ```\n   *\n   * @property errorIcon\n   * @type string\n   * @public\n   */\n  errorIcon: Config.formValidationErrorIcon,\n\n  /**\n   * The icon classes to be used for a feedback icon in a \"warning\" validation state.\n   * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\n   * rendered if `useIcons` is false.\n   *\n   * You can change this globally by setting the `formValidationWarningIcon` property of\n   * the ember-bootstrap configuration in your config/environment.js file. If your are\n   * using FontAwesome for example:\n   *\n   * ```js\n   * ENV['ember-bootstrap'] = {\n     *   formValidationWarningIcon: 'fa fa-warning'\n     * }\n   * ```\n   *\n   * @property warningIcon\n   * @type string\n   * @public\n   */\n  warningIcon: Config.formValidationWarningIcon,\n\n  /**\n   * The icon classes to be used for a feedback icon in a \"info\" validation state.\n   * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\n   * rendered if `useIcons` is false.\n   *\n   * You can change this globally by setting the `formValidationInfoIcon` property of\n   * the ember-bootstrap configuration in your config/environment.js file. If your are\n   * using FontAwesome for example:\n   *\n   * ```js\n   * ENV['ember-bootstrap'] = {\n     *   formValidationInfoIcon: 'fa fa-info-circle\n     * }\n   * ```\n   *\n   * The \"info\" validation state is not supported in Bootstrap CSS, but can be easily added\n   * using the following LESS style:\n   * ```less\n   * .has-info {\n     *   .form-control-validation(@state-info-text; @state-info-text; @state-info-bg);\n     * }\n   * ```\n   *\n   * @property infoIcon\n   * @type string\n   * @public\n   */\n  infoIcon: Config.formValidationInfoIcon,\n\n  iconName: computed('validation', function() {\n    let validation = this.get('validation') || 'success';\n    return this.get(`${validation}Icon`);\n  }),\n\n  hasIconForValidationState: computed.notEmpty('iconName'),\n\n  /**\n   * Set to a validation state to render the form-group with a validation style.\n   * See http://getbootstrap.com/css/#forms-control-validation\n   *\n   * The default states of \"success\", \"warning\" and \"error\" are supported by Bootstrap out-of-the-box.\n   * But you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)\n   * a feedback whose class is taken from the <state>Icon property\n   *\n   * @property validation\n   * @type string\n   * @public\n   */\n  validation: null,\n\n  validationClass: computed('validation', function() {\n    let validation = this.get('validation');\n    if (!Ember.isBlank(validation)) {\n      return `has-${this.get('validation')}`;\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-form.js":"import Ember from 'ember';\nimport FormElement from 'ember-bootstrap/components/bs-form-element';\nimport ComponentParent from 'ember-bootstrap/mixins/component-parent';\n\nconst { computed } = Ember;\n\n/**\n  Render a form with the appropriate Bootstrap layout class (see `formLayout`).\n  Allows setting a `model` that nested `Components.FormElement`s can access, and that can provide form validation (see below)\n\n  You can use whatever markup you like within the form:\n\n ```handlebars\n   {{#bs-form action=\"submit\"}}\n     {{#bs-form-group validation=firstNameValidation}}\n       <label class=\"control-label\">First name</label>\n       {{bs-input type=\"text\" value=firstname}}\n    {{/bs-form-group}}\n  {{/bs-form}}\n  ```\n\n  However to benefit from features such as automatic form markup, validations and validation markup, use `Components.FormElement`\n  as nested components. See below for an example.\n\n  ### Submitting the form\n\n  When the form is submitted (e.g. by clicking a submit button), the event will be intercepted and the default action\n  will be sent to the controller.\n  In case the form supports validation (see \"Form validation\" below), the \"before\" action is called (which allows you to\n  do e.g. model data normalization), then the available  validation rules are evaluated, and if those fail, the \"invalid\"\n  action is sent instead of the default \"action\".\n\n  ### Use with Components.FormElement\n\n  When using `Components.FormElement`s with their `property` set to property names of the form's validation enabled\n  `model`, you gain some additional powerful features:\n  * the appropriate Bootstrap markup for the given `formLayout` and the form element's `controlType` is automatically generated\n  * markup for validation states and error messages is generated based on the model's validation (if available), when submitting the form\n  with an invalid validation, or when focusing out of invalid inputs\n\n  ```handlebars\n  {{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n    {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n    {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n    {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n    {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n  {{/bs-form}}\n  ```\n\n  See the [Components.FormElement](Components.FormElement.html) API docs for further information.\n\n  ### Form validation\n\n  All version of ember-bootstrap beginning from 0.7.0 do not come with built-in support for validation engines anymore.\n  Instead support is added usually by additional Ember addons, for example:\n\n  * [ember-bootstrap-validations](https://github.com/kaliber5/ember-bootstrap-validations): adds support for [ember-validations](https://github.com/DockYard/ember-validations)\n  * [ember-bootstrap-cp-validations](https://github.com/offirgolan/ember-bootstrap-cp-validations): adds support for [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations)\n  * [ember-bootstrap-changeset-validations](https://github.com/kaliber5/ember-bootstrap-changeset-validations): adds support for [ember-changeset](https://github.com/poteto/ember-changeset)\n\n  To add your own validation support, you have to:\n\n  * extend this component, setting `hasValidator` to true if validations are available (by means of a computed property for example), and implementing the `validate` method\n  * extend the [Components.FormElement](Components.FormElement.html) component and implement the `setupValidations` hook or simply override the `errors` property to add the validation error messages to be displayed\n\n  When validation fails, the appropriate Bootstrap markup is added automatically, i.e. the error classes are applied and\n  the validation messages are shown for each form element. In case the validation library supports it, also warning messages\n  are shown. See the [Components.FormElement](Components.FormElement.html) documentation for further details.\n\n  See the above mentioned addons for examples.\n\n\n  @class Form\n  @namespace Components\n  @extends Ember.Component\n  @public\n */\nexport default Ember.Component.extend(ComponentParent, {\n  tagName: 'form',\n  classNameBindings: ['layoutClass'],\n  attributeBindings: ['_novalidate:novalidate'],\n  ariaRole: 'form',\n\n  /**\n   * Bootstrap form class name (computed)\n   *\n   * @property layoutClass\n   * @type string\n   * @readonly\n   * @protected\n   *\n   */\n  layoutClass: computed('formLayout', function() {\n    let layout = this.get('formLayout');\n    return layout === 'vertical' ? 'form' : `form-${layout}`;\n  }),\n\n  /**\n   * Set a model that this form should represent. This serves several purposes:\n   *\n   * * child `Components.FormElement`s can access and bind to this model by their `property`\n   * * when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,\n   * child `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.\n   * Moreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.\n   *\n   * @property model\n   * @type Ember.Object\n   * @public\n   */\n  model: null,\n\n  /**\n   * Set the layout of the form to either \"vertical\", \"horizontal\" or \"inline\". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal\n   *\n   * @property formLayout\n   * @type string\n   * @public\n   */\n  formLayout: 'vertical',\n\n  /**\n   * Check if validating the model is supported. This needs to be implemented by another addon.\n   *\n   * @property hasValidator\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  hasValidator: false,\n\n  /**\n   * The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the\n   * whole form.\n   *\n   * @property horizontalLabelGridClass\n   * @type string\n   * @default 'col-md-4'\n   * @public\n   */\n  horizontalLabelGridClass: 'col-md-4',\n\n  /**\n   * If set to true pressing enter will submit the form, even if no submit button is present\n   *\n   * @property submitOnEnter\n   * @type boolean\n   * @default false\n   * @public\n   */\n  submitOnEnter: false,\n\n  /**\n   * If set to true novalidate attribute is present on form element\n   *\n   * @property novalidate\n   * @type boolean\n   * @default null\n   * @public\n   */\n  novalidate: false,\n\n  _novalidate: computed('novalidate', function() {\n    return this.get('novalidate') === true ? '' : undefined;\n  }),\n\n  /**\n   * An array of `Components.FormElement`s that are children of this form.\n   *\n   * @property childFormElements\n   * @type Array\n   * @readonly\n   * @protected\n   */\n  childFormElements: computed.filter('children', function(view) {\n    return view instanceof FormElement;\n  }),\n\n  /**\n   * Validate hook which will return a promise that will either resolve if the model is valid\n   * or reject if it's not. This should be overridden to add validation support.\n   *\n   * @param Object model\n   * @return {Promise}\n   * @public\n   */\n  validate(/* model */) {\n    Ember.deprecate('[ember-bootstrap] Validation support has been moved to 3rd party addons.\\n' +\n                    'ember-validations: https://github.com/kaliber5/ember-bootstrap-validations\\n' +\n                    'ember-cp-validations: https://github.com/offirgolan/ember-bootstrap-cp-validations\\n',\n      false,\n      {\n        id: 'ember-bootstrap.form.validate',\n        url: 'http://kaliber5.github.io/ember-bootstrap/api/classes/Components.Form.html'\n      }\n    );\n  },\n\n  /**\n   * A handler called before the form is validated (if possible) and submitted.\n   *\n   * @event before\n   * @param Object model  The form's `model`\n   * @public\n   */\n\n  /**\n   * A handler called when submit has been triggered and the model has passed all validations (if present).\n   *\n   * @event action\n   * @param Object model  The form's `model`\n   * @param Object result The returned result from the validate method, if validation is available\n   * @public\n   */\n\n  /**\n   * A handler called when validation of the model has failed.\n   *\n   * @event invalid\n   * @param Object error\n   * @public\n   */\n\n  /**\n   * Submit handler that will send the default action (\"action\") to the controller when submitting the form.\n   *\n   * If there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and\n   * only if validation is successful the default action will be sent. Otherwise an \"invalid\" action will be sent, and\n   * all the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and\n   * messages will be shown automatically.\n   *\n   * @method submit\n   * @private\n   */\n  submit(e) {\n    if (e) {\n      e.preventDefault();\n    }\n    let model = this.get('model');\n\n    this.sendAction('before', model);\n\n    if (!this.get('hasValidator')) {\n      return this.sendAction('action', model);\n    } else {\n      let validationPromise = this.validate(this.get('model'));\n      if (validationPromise && validationPromise instanceof Ember.RSVP.Promise) {\n        validationPromise.then((r) => this.sendAction('action', model, r), (err) => {\n          this.get('childFormElements').setEach('showValidation', true);\n          return this.sendAction('invalid', err);\n        });\n      }\n    }\n  },\n\n  keyPress(e) {\n    let code = e.keyCode || e.which;\n    if (code === 13 && this.get('submitOnEnter')) {\n      this.$().submit();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-input.js":"import Ember from 'ember';\n\n/**\n Extends Ember.TextField to add Bootstrap's 'form-control' class.\n\n @class Input\n @namespace Components\n @extends Ember.TextField\n @public\n */\nexport default Ember.TextField.extend({\n  classNames: ['form-control']\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-modal-body.js":"import Ember from 'ember';\n\n/**\n\n Modal body element used within [Components.Modal](Components.Modal.html) components. See there for examples.\n\n @class ModalBody\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n  classNames: ['modal-body']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-modal-dialog.js":"import Ember from 'ember';\n\nconst { computed } = Ember;\n\n/**\n  Internal component for modal's markup and event handling. Should not be used directly.\n\n  @class ModalDialog\n  @namespace Components\n  @extends Ember.Component\n  @private\n */\nexport default Ember.Component.extend({\n  classNames: ['modal'],\n  classNameBindings: ['fade', 'in'],\n  attributeBindings: ['tabindex'],\n  ariaRole: 'dialog',\n  tabindex: '-1',\n\n  /**\n   * The title of the modal, visible in the modal header. Is ignored if `header` is false.\n   *\n   * @property title\n   * @type string\n   * @public\n   */\n  title: null,\n\n  /**\n   * Display a close button (x icon) in the corner of the modal header.\n   *\n   * @property closeButton\n   * @type boolean\n   * @default true\n   * @public\n   */\n  closeButton: true,\n\n  /**\n   * Set to false to disable fade animations.\n   *\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * Used to apply Bootstrap's \"in\" class\n   *\n   * @property in\n   * @type boolean\n   * @default false\n   * @private\n   */\n  'in': false,\n\n  /**\n   * Closes the modal when escape key is pressed.\n   *\n   * @property keyboard\n   * @type boolean\n   * @default true\n   * @public\n   */\n  keyboard: true,\n\n  /**\n   * Generate a modal header component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template\n   *\n   * @property header\n   * @type boolean\n   * @default true\n   * @public\n   */\n  header: true,\n\n  /**\n   * Generate a modal body component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalBody](Components.ModalBody.html) in the components block template.\n   *\n   * Always set this to false if `header` and/or `footer` is false!\n   *\n   * @property body\n   * @type boolean\n   * @default true\n   * @public\n   */\n  body: true,\n\n  /**\n   * Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template\n   *\n   * @property footer\n   * @type boolean\n   * @default true\n   * @public\n   */\n  footer: true,\n\n  /**\n   * Property for size styling, set to null (default), 'lg' or 'sm'\n   *\n   * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)\n   *\n   * @property size\n   * @type String\n   * @public\n   */\n  size: null,\n\n  /**\n   * If true clicking on the backdrop will close the modal.\n   *\n   * @property backdropClose\n   * @type boolean\n   * @default true\n   * @public\n   */\n  backdropClose: true,\n\n  /**\n   * Name of the size class\n   *\n   * @property sizeClass\n   * @type string\n   * @private\n   */\n  sizeClass: computed('size', function() {\n    let size = this.get('size');\n    return Ember.isBlank(size) ? null : `modal-${size}`;\n  }),\n\n  keyDown(e) {\n    let code = e.keyCode || e.which;\n    if (code === 27 && this.get('keyboard')) {\n      this.sendAction('close');\n    }\n  },\n\n  click(e) {\n    if (e.target !== e.currentTarget || !this.get('backdropClose')) {\n      return;\n    }\n    this.sendAction('close');\n  }\n\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-modal-footer.js":"import Ember from 'ember';\nimport ModalCloser from 'ember-bootstrap/mixins/modal-closer';\n\nconst { computed } = Ember;\n\n/**\n\n Modal footer element used within [Components.Modal](Components.Modal.html) components. See there for examples.\n\n @class ModalFooter\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend(ModalCloser, {\n  tagName: 'form',\n  classNames: ['modal-footer'],\n\n  /**\n   * The title of the default close button. Will be ignored (i.e. no close button) if you provide your own block\n   * template.\n   *\n   * @property closeTitle\n   * @type string\n   * @default 'Ok'\n   * @public\n   */\n  closeTitle: 'Ok',\n\n  /**\n   * The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null or if you provide\n   * your own block template.\n   *\n   * @property submitTitle\n   * @type string\n   * @default null\n   * @public\n   */\n  submitTitle: null,\n\n  hasSubmitButton: computed.notEmpty('submitTitle'),\n\n  /**\n   * Set to true to disable the submit button. If you bind this to some property that indicates if submitting is allowed\n   * (form validation for example) this can be used to prevent the user from pressing the submit button.\n   *\n   * @property submitDisabled\n   * @type boolean\n   * @default false\n   * @public\n   */\n  submitDisabled: false,\n\n  /**\n   * The action to send to the parent modal component when the modal footer's form is submitted\n   *\n   * @property submitAction\n   * @type string\n   * @default 'submit'\n   * @private\n   */\n  submitAction: 'submit',\n\n  submit(e) {\n    e.preventDefault();\n    // send to parent bs-modal component\n    this.sendAction('submitAction');\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-modal-header.js":"import Ember from 'ember';\nimport ModalCloser from 'ember-bootstrap/mixins/modal-closer';\n\n/**\n\n Modal header element used within [Components.Modal](Components.Modal.html) components. See there for examples.\n\n @class ModalHeader\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend(ModalCloser, {\n  classNames: ['modal-header'],\n\n  /**\n   * Show a close button (x icon)\n   *\n   * @property closeButton\n   * @type boolean\n   * @default true\n   * @public\n   */\n  closeButton: true,\n\n  /**\n   * The title to display in the modal header\n   *\n   * @property title\n   * @type string\n   * @default null\n   * @public\n   */\n  title: null\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-modal.js":"import Ember from 'ember';\n\nconst { computed, observer } = Ember;\n\nconst Modal = {};\n\nModal.TRANSITION_DURATION = 300;\nModal.BACKDROP_TRANSITION_DURATION = 150;\n\n/**\n\n Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals). Creating a simple modal is easy:\n\n ```hbs\n {{#bs-modal title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal}}\n ```\n\n This will automatically create the appropriate markup, with a modal header containing the title, and a footer containing\n a default \"Ok\" button, that will close the modal automatically (unless you set `autoClose` to false).\n\n A modal created this way will be visible at once. You can use the `{{#if ...}}` helper to hide all modal elements form\n the DOM until needed. Or you can bind the `open` property to trigger showing and hiding the modal:\n\n ```hbs\n {{#bs-modal open=openModal title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal}}\n ```\n\n ### Custom Markup\n\n To customize your modal markup you can use the following sub components:\n\n [Components.ModalBody](Components.ModalBody.html)\n [Components.ModalHeader](Components.ModalHeader.html)\n [Components.ModalFooter](Components.ModalFooter.html)\n\n In the example above, these are generated for you automatically. Whenever you use one of these by yourself you should\n set the appropriate property (`body`, `footer`, `header`) to false to prevent their automatic generation. Note that\n in any case where you use a custom sub component, you must also use a custom [Components.ModalBody](Components.ModalBody.html)!\n\n A common use case is to customize the buttons in the footer. Most often you will have a cancel button that closes the\n model without action, and a submit button that triggers some action. The footer component supports this case by letting\n you customize the button titles, the rest (triggering close or submit actions) automatically set up:\n\n ```hbs\n {{#bs-modal body=false footer=false title=\"Attention\" submitAction=(action \"submit\")}}\n   {{#bs-modal-body}}Are you sure?{{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=\"Cancel\" submitTitle=\"Ok\"}}\n {{/bs-modal}}\n ```\n\n If you further want to customize your modal elements, you can supply custom templates for your footer and header, as in\n the following example:\n\n ```hbs\n {{#bs-modal body=false footer=false header=false submitAction=(action \"submit\")}}\n   {{#bs-modal-header}}\n     <h4 class=\"modal-title\"><i class=\"glyphicon glyphicon-alert\"></i> Alert</h4>\n   {{/bs-modal-header}}\n   {{#bs-modal-body}}Are you absolutely sure you want to do that???{{/bs-modal-body}}\n   {{#bs-modal-footer as |footer|}}\n     {{#bs-button action=(action \"close\" target=footer) type=\"danger\"}}Oh no, forget it!{{/bs-button}}\n     {{#bs-button buttonType=\"submit\" type=\"success\"}}Yeah!{{/bs-button}}\n   {{/bs-modal-footer}}\n {{/bs-modal}}\n ```\n\n Note the use of the action helper of the close button that triggers the close action on the modal footer component\n instead of on the controller, which will bubble up to the modal component and close the modal.\n\n ### Modals with forms\n\n There is a special case when you have a form inside your modals body: you probably do not want to have a submit button\n within your form but instead in your modal footer. Hover pressing the submit button outside of your form would not\n trigger the form data to be submitted. In the example below this would not trigger the submit action of the form, an\n thus bypass the form validation feature of the form component.\n\n ```hbs\n {{#bs-modal title=\"Form Example\" body=false footer=false}}\n   {{#bs-modal-body}}\n     {{#bs-form action=(action \"submit\") model=this}}\n       {{bs-form-element controlType=\"text\" label=\"first name\" property=\"firstname\"}}\n       {{bs-form-element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n     {{/bs-form}}\n   {{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=(t \"contact.label.cancel\") submitTitle=(t \"contact.label.ok\")}}\n {{/bs-modal}}\n ```\n\n The modal component supports this common case by triggering the submit event programmatically on the body's form if\n present whenever the footer's submit button is pressed, so the example above will work as expected.\n\n ### Auto-focus\n\n In order to allow key handling to function, the modal's root element is given focus once the modal is shown. If your\n modal contains an element such as a text input and you would like it to be given focus rather than the modal element,\n then give it the HTML5 autofocus attribute:\n\n ```hbs\n {{#bs-modal title=\"Form Example\" body=false footer=false}}\n   {{#bs-modal-body}}\n     {{#bs-form action=(action \"submit\") model=this}}\n       {{bs-form-element controlType=\"text\" label=\"first name\" property=\"firstname\" autofocus=true}}\n       {{bs-form-element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n     {{/bs-form}}\n   {{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=(t \"contact.label.cancel\") submitTitle=(t \"contact.label.ok\")}}\n {{/bs-modal}}\n ```\n\n\n ### Modals inside wormhole\n\n Modals make use of the [ember-wormhole](https://github.com/yapplabs/ember-wormhole) addon, which will be installed\n automatically alongside ember-bootstrap. This is used to allow the modal to be placed in deeply nested\n components/templates where it belongs to logically, but to have the actual DOM elements within a special container\n element, which is a child of ember's root element. This will make sure that modals always overlay the whole app, and\n are not effected by parent elements with `overflow: hidden` for example.\n\n If you want the modal to render in place, rather than being wormholed, you can set renderInPlace=true.\n\n @class Modal\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n\n  /**\n   * Visibility of the modal. Toggle to to show/hide with CSS transitions.\n   *\n   * @property open\n   * @type boolean\n   * @default true\n   * @public\n   */\n  open: true,\n\n  /**\n   * The title of the modal, visible in the modal header. Is ignored if `header` is false.\n   *\n   * @property title\n   * @type string\n   * @public\n   */\n  title: null,\n\n  /**\n   * Display a close button (x icon) in the corner of the modal header.\n   *\n   * @property closeButton\n   * @type boolean\n   * @default true\n   * @public\n   */\n  closeButton: true,\n\n  /**\n   * Set to false to disable fade animations.\n   *\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * @property notFade\n   * @type boolean\n   * @private\n   */\n  notFade: computed.not('fade'),\n\n  /**\n   * Used to apply Bootstrap's \"in\" class\n   *\n   * @property in\n   * @type boolean\n   * @default false\n   * @private\n   */\n  'in': false,\n\n  /**\n   * Use a semi-transparent modal background to hide the rest of the page.\n   *\n   * @property backdrop\n   * @type boolean\n   * @default true\n   * @public\n   */\n  backdrop: true,\n\n  /**\n   * @property showBackdrop\n   * @type boolean\n   * @default false\n   * @private\n   */\n  showBackdrop: false,\n\n  /**\n   * Closes the modal when escape key is pressed.\n   *\n   * @property keyboard\n   * @type boolean\n   * @default true\n   * @public\n   */\n  keyboard: true,\n\n  /**\n   * If true clicking a close button will hide the modal automatically.\n   * If you want to handle hiding the modal by yourself, you can set this to false and use the closeAction to\n   * implement your custom logic.\n   *\n   * @property autoClose\n   * @type boolean\n   * @default true\n   * @public\n   */\n  autoClose: true,\n\n  /**\n   * Generate a modal header component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template\n   *\n   * @property header\n   * @type boolean\n   * @default true\n   * @public\n   */\n  header: true,\n\n  /**\n   * Generate a modal body component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalBody](Components.ModalBody.html) in the components block template.\n   *\n   * Always set this to false if `header` and/or `footer` is false!\n   *\n   * @property body\n   * @type boolean\n   * @default true\n   * @public\n   */\n  body: true,\n\n  /**\n   * Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an\n   * instance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template\n   *\n   * @property footer\n   * @type boolean\n   * @default true\n   * @public\n   */\n  footer: true,\n\n  /**\n   * The id of the `.modal` element.\n   *\n   * @property modalId\n   * @type string\n   * @readonly\n   * @private\n   */\n  modalId: computed('elementId', function() {\n    return `${this.get('elementId')}-modal`;\n  }),\n\n  /**\n   * The jQuery object of the `.modal` element.\n   *\n   * @property modalElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  modalElement: computed('modalId', function() {\n    return Ember.$(`#${this.get('modalId')}`);\n  }).volatile(),\n\n  /**\n   * The id of the backdrop element.\n   *\n   * @property backdropId\n   * @type string\n   * @readonly\n   * @private\n   */\n  backdropId: computed('elementId', function() {\n    return `${this.get('elementId')}-backdrop`;\n  }),\n\n  /**\n   * The jQuery object of the backdrop element.\n   *\n   * @property backdropElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  backdropElement: computed('backdropId', function() {\n    return Ember.$(`#${this.get('backdropId')}`);\n  }).volatile(),\n\n  /**\n   * Use CSS transitions when showing/hiding the modal?\n   *\n   * @property usesTransition\n   * @type boolean\n   * @readonly\n   * @private\n   */\n  usesTransition: computed('fade', function() {\n    return Ember.$.support.transition && this.get('fade');\n  }),\n\n  /**\n   * Property for size styling, set to null (default), 'lg' or 'sm'\n   *\n   * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)\n   *\n   * @property size\n   * @type String\n   * @public\n   */\n  size: null,\n\n  /**\n   * If true clicking on the backdrop will close the modal.\n   *\n   * @property backdropClose\n   * @type boolean\n   * @default true\n   * @public\n   */\n  backdropClose: true,\n\n  /**\n   * If true component will render in place, rather than be wormholed.\n   *\n   * @property renderInPlace\n   * @type boolean\n   * @default false\n   * @public\n   */\n  renderInPlace: false,\n\n  /**\n   * @property _renderInPlace\n   * @type boolean\n   * @private\n   */\n  _renderInPlace: computed('renderInPlace', function() {\n    return this.get('renderInPlace') || typeof Ember.$ !== 'function' || Ember.$('#ember-bootstrap-modal-container').length === 0;\n  }),\n\n  /**\n   * The action to be sent when the modal footer's submit button (if present) is pressed.\n   * Note that if your modal body contains a form (e.g. [Components.Form](Components.Form.html){{/crossLink}}) this action will\n   * not be triggered. Instead a submit event will be triggered on the form itself. See the class description for an\n   * example.\n   *\n   * @property submitAction\n   * @type string\n   * @default null\n   * @public\n   */\n  submitAction: null,\n\n  /**\n   * The action to be sent when the modal is closing.\n   * This will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.\n   * Note that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some\n   * time to finish. Use the `closedAction` if you need the modal to be hidden when the action triggers.\n   *\n   * You can set `autoClose` to false to prevent closing the modal automatically, and do that in your closeAction by\n   * setting `open` to false.\n   *\n   * @property closeAction\n   * @type string\n   * @default null\n   * @public\n   */\n  closeAction: null,\n\n  /**\n   * The action to be sent after the modal has been completely hidden (including the CSS transition).\n   *\n   * @property closedAction\n   * @type string\n   * @default null\n   * @public\n   */\n  closedAction: null,\n\n  /**\n   * The action to be sent when the modal is opening.\n   * This will be triggered immediately after the modal is shown (so it's safe to access the DOM for\n   * size calculations and the like). This means that if fade=true, it will be shown in between the\n   * backdrop animation and the fade animation.\n   *\n   * @property openAction\n   * @type string\n   * @default null\n   * @public\n   */\n  openAction: null,\n\n  /**\n   * The action to be sent after the modal has been completely shown (including the CSS transition).\n   *\n   * @property openedAction\n   * @type string\n   * @default null\n   * @public\n   */\n  openedAction: null,\n\n  actions: {\n    close() {\n      if (this.get('autoClose')) {\n        this.set('open', false);\n      }\n      this.sendAction('closeAction');\n    },\n    submit() {\n      let form = this.get('modalElement').find('.modal-body form');\n      if (form.length > 0) {\n        // trigger submit event on body form\n        form.trigger('submit');\n      } else {\n        // if we have no form, we send a submit action\n        this.sendAction('submitAction');\n      }\n    }\n  },\n\n  /**\n   * Give the modal (or its autofocus element) focus\n   *\n   * @method takeFocus\n   * @private\n   */\n  takeFocus() {\n    let focusElement = this.get('modalElement').find('[autofocus]').first();\n    if (focusElement.length === 0) {\n      focusElement = this.get('modalElement');\n    }\n    if (focusElement.length > 0) {\n      focusElement.focus();\n    }\n  },\n\n  /**\n   * Show the modal\n   *\n   * @method show\n   * @private\n   */\n  show() {\n\n    this.checkScrollbar();\n    this.setScrollbar();\n\n    Ember.$('body').addClass('modal-open');\n\n    this.resize();\n\n    let callback = function() {\n      if (this.get('isDestroyed')) {\n        return;\n      }\n\n      this.get('modalElement')\n        .show()\n        .scrollTop(0);\n\n      this.handleUpdate();\n      this.set('in', true);\n      this.sendAction('openAction');\n\n      if (this.get('usesTransition')) {\n        this.get('modalElement')\n          .one('bsTransitionEnd', Ember.run.bind(this, function() {\n            this.takeFocus();\n            this.sendAction('openedAction');\n          }))\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION);\n      } else {\n        this.takeFocus();\n        this.sendAction('openedAction');\n      }\n    };\n    this.handleBackdrop(callback);\n  },\n\n  /**\n   * Hide the modal\n   *\n   * @method hide\n   * @private\n   */\n  hide() {\n    this.resize();\n    this.set('in', false);\n\n    if (this.get('usesTransition')) {\n      this.get('modalElement')\n        .one('bsTransitionEnd', Ember.run.bind(this, this.hideModal))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION);\n    } else {\n      this.hideModal();\n    }\n  },\n\n  /**\n   * Clean up after modal is hidden and call closedAction\n   *\n   * @method hideModal\n   * @private\n   */\n  hideModal() {\n    if (this.get('isDestroyed')) {\n      return;\n    }\n\n    this.get('modalElement').hide();\n    this.handleBackdrop(() => {\n      Ember.$('body').removeClass('modal-open');\n      this.resetAdjustments();\n      this.resetScrollbar();\n      this.sendAction('closedAction');\n    });\n  },\n\n  /**\n   * SHow/hide the backdrop\n   *\n   * @method handleBackdrop\n   * @param callback\n   * @private\n   */\n  handleBackdrop(callback) {\n    let doAnimate = this.get('usesTransition');\n\n    if (this.get('open') && this.get('backdrop')) {\n      this.set('showBackdrop', true);\n\n      if (!callback) {\n        return;\n      }\n\n      if (doAnimate) {\n        Ember.run.schedule('afterRender', this, function() {\n          let $backdrop = this.get('backdropElement');\n          Ember.assert('Backdrop element should be in DOM', $backdrop && $backdrop.length > 0);\n          $backdrop\n            .one('bsTransitionEnd', Ember.run.bind(this, callback))\n            .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);\n        });\n      } else {\n        callback.call(this);\n      }\n    } else if (!this.get('open') && this.get('backdrop')) {\n      let $backdrop = this.get('backdropElement');\n      Ember.assert('Backdrop element should be in DOM', $backdrop && $backdrop.length > 0);\n\n      let callbackRemove = function() {\n        this.set('showBackdrop', false);\n        if (callback) {\n          callback.call(this);\n        }\n      };\n      if (doAnimate) {\n        $backdrop\n          .one('bsTransitionEnd', Ember.run.bind(this, callbackRemove))\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);\n      } else {\n        callbackRemove.call(this);\n      }\n    } else if (callback) {\n      Ember.run.next(this, callback);\n    }\n  },\n\n  /**\n   * Attach/Detach resize event listeners\n   *\n   * @method resize\n   * @private\n   */\n  resize() {\n    if (this.get('open')) {\n      Ember.$(window).on('resize.bs.modal', Ember.run.bind(this, this.handleUpdate));\n    } else {\n      Ember.$(window).off('resize.bs.modal');\n    }\n  },\n\n  /**\n   * @method handleUpdate\n   * @private\n   */\n  handleUpdate() {\n    this.adjustDialog();\n  },\n\n  /**\n   * @method adjustDialog\n   * @private\n   */\n  adjustDialog() {\n    let modalIsOverflowing = this.get('modalElement')[0].scrollHeight > document.documentElement.clientHeight;\n    this.get('modalElement').css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.get('scrollbarWidth') : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.get('scrollbarWidth') : ''\n    });\n  },\n\n  /**\n   * @method resetAdjustments\n   * @private\n   */\n  resetAdjustments() {\n    this.get('modalElement').css({\n      paddingLeft: '',\n      paddingRight: ''\n    });\n  },\n\n  /**\n   * @method checkScrollbar\n   * @private\n   */\n  checkScrollbar() {\n    let fullWindowWidth = window.innerWidth;\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      let documentElementRect = document.documentElement.getBoundingClientRect();\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n    }\n\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n  },\n\n  /**\n   * @method setScrollbar\n   * @private\n   */\n  setScrollbar() {\n    let bodyPad = parseInt((Ember.$('body').css('padding-right') || 0), 10);\n    this.originalBodyPad = document.body.style.paddingRight || '';\n    if (this.bodyIsOverflowing) {\n      Ember.$('body').css('padding-right', bodyPad + this.get('scrollbarWidth'));\n    }\n  },\n\n  /**\n   * @method resetScrollbar\n   * @private\n   */\n  resetScrollbar() {\n    Ember.$('body').css('padding-right', this.originalBodyPad);\n  },\n\n  /**\n   * @property scrollbarWidth\n   * @type number\n   * @readonly\n   * @private\n   */\n  scrollbarWidth: computed(function() {\n    let scrollDiv = document.createElement('div');\n    scrollDiv.className = 'modal-scrollbar-measure';\n    this.get('modalElement').after(scrollDiv);\n    let scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    Ember.$(scrollDiv).remove();\n    return scrollbarWidth;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n    if (this.get('open')) {\n      this.show();\n    }\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    Ember.$(window).off('resize.bs.modal');\n    Ember.$('body').removeClass('modal-open');\n    this.resetScrollbar();\n  },\n\n  _observeOpen: observer('open', function() {\n    if (this.get('open')) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }),\n\n  init() {\n    this._super(...arguments);\n    let { open, backdrop, fade } = this.getProperties('open', 'backdrop', 'fade');\n    this.set('in', open && !fade);\n    this.set('showBackdrop', open && backdrop);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-navbar-content.js":"import Ember from 'ember';\nimport BsCollapseComponent from 'ember-bootstrap/components/bs-collapse';\nimport NavbarComponent from 'ember-bootstrap/components/bs-navbar';\nimport layout from '../templates/components/bs-navbar-content';\n\n/**\n * Component to wrap the collapsible content of a [Components.Navbar](Components.Navbar.html) component.\n * Have a look there for examples.\n *\n * @class NavbarContent\n * @namespace Components\n * @extends Components.Collapse\n * @public\n */\nexport default BsCollapseComponent.extend({\n  layout,\n\n  classNames: ['navbar-collapse'],\n\n  navbar: Ember.computed(function() {\n    return this.nearestOfType(NavbarComponent);\n  }),\n\n  collapsed: Ember.computed.reads('navbar.collapsed')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-navbar.js":"import Ember from 'ember';\nimport TypeClass from 'ember-bootstrap/mixins/type-class';\nimport layout from '../templates/components/bs-navbar';\n\n/**\n Component to generate [bootstrap navbars](http://getbootstrap.com/components/#navbar).\n\n ### Usage\n\n Used in combination with the following components:\n\n - [Components.NavbarContent](Components.NavbarContent.html)\n - [Components.NavbarToggle](Components.NavbarToggle.html)\n - [Components.NavbarNav](Components.NavbarNav.html)\n - [Components.NavItem](Components.NavItem.html)\n\n ```hbs\n {{#bs-navbar}}\n   <div class=\"navbar-header\">\n     {{#bs-navbar-toggle}}\n       <span class=\"sr-only\">Toggle navigation</span>\n       <span class=\"icon-bar\"></span>\n       <span class=\"icon-bar\"></span>\n       <span class=\"icon-bar\"></span>\n     {{/bs-navbar-toggle}}\n     <a class=\"navbar-brand\" href=\"#\">Brand</a>\n   </div>\n   {{#bs-navbar-content}}\n     {{#bs-navbar-nav}}\n       {{#bs-nav-item}}{{#link-to \"alert\"}}Alert{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"button\"}}Buttons{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"dropdown\"}}Dropdown{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"forms\"}}Forms{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"accordion\"}}Accordion{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"collapse\"}}Collapse{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"modal\"}}Modals{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"progress\"}}Progress bars{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"navs\"}}Navs{{/link-to}}{{/bs-nav-item}}\n       {{#bs-nav-item}}{{#link-to \"navbars\"}}Navbars{{/link-to}}{{/bs-nav-item}}\n     {{/bs-navbar-nav}}\n   {{/bs-navbar-content}}\n {{/bs-navbar}}\n ```\n\n ### Navbar styles\n\n The component supports the default bootstrap navbar styling options \"default\" and \"inverse\" through the `type`\n property. Bootstrap navbars [do not currently support justified nav links](http://getbootstrap.com/components/#navbar-default),\n so those are explicitly disallowed.\n\n Other bootstrap navbar variations, such as forms, buttons, etc. can be supported through direct use of\n bootstrap styles applied through the `class` attribute on the components.\n\n @class Navbar\n @namespace Components\n @extends Ember.Component\n @uses Mixins.TypeClass\n @public\n\n */\nexport default Ember.Component.extend(TypeClass, {\n  layout,\n\n  tagName: 'nav',\n  classNames: ['navbar'],\n  classNameBindings: ['positionClass'],\n\n  classTypePrefix: 'navbar',\n\n  /**\n   * Manages the state for the responsive menu between the toggle and the content.\n   *\n   * @property collapsed\n   * @type boolean\n   * @default true\n   * @protected\n   */\n  collapsed: true,\n\n  /**\n   * Controls whether the wrapping div is a fluid container or not.\n   *\n   * @property fluid\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fluid: true,\n\n  /**\n   * Specifies the position classes for the navbar, currently supporting none, \"fixed-top\", \"fixed-bottom\", and \"static-top\".\n   * See the [bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top) for details.\n   *\n   * @property position\n   * @type String\n   * @default null\n   * @public\n   */\n  position: null,\n\n  positionClass: Ember.computed('position', function() {\n    let position = this.get('position');\n    let validPositions = ['fixed-top', 'fixed-bottom', 'static-top'];\n\n    if (validPositions.indexOf(position) === -1) {\n      return null;\n    }\n\n    return `navbar-${position}`;\n  }),\n\n  actions: {\n    toggleNavbar() {\n      this.toggleProperty('collapsed');\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-navbar-nav.js":"import BsNavComponent from 'ember-bootstrap/components/bs-nav';\nimport layout from '../templates/components/bs-navbar-nav';\n\n/**\n * Component for the `.nav` element within a [Components.Navbar](Components.Navbar.html)\n * component. Have a look there for examples.\n *\n * Per [the bootstrap docs](http://getbootstrap.com/components/#navbar),\n * justified navbar nav links are not supported.\n *\n * @class NavbarNav\n * @namespace Components\n * @extends Components.Nav\n * @public\n */\nexport default BsNavComponent.extend({\n  layout,\n\n  classNames: ['navbar-nav'],\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n    this.set('justified', false);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-navbar-toggle.js":"import Ember from 'ember';\nimport BsButtonComponent from 'ember-bootstrap/components/bs-button';\nimport NavbarComponent from 'ember-bootstrap/components/bs-navbar';\nimport layout from '../templates/components/bs-navbar-toggle';\n\n/**\n * Component to implement the responsive menu toggle behavior in a [Components.Navbar](Components.Navbar.html)\n * component. Have a look there for examples.\n *\n * The button `toggle` property will always be set to `true` in this component.\n *\n * @class NavbarToggle\n * @namespace Components\n * @extends Components.Button\n * @public\n */\nexport default BsButtonComponent.extend({\n  layout,\n\n  classNames: ['navbar-toggle', 'collapsed'],\n\n  targetObject: Ember.computed(function() {\n    return this.nearestOfType(NavbarComponent);\n  }).volatile(),\n\n  action: 'toggleNavbar',\n\n  actions: {\n    toggleNavbar() {\n      this.sendAction();\n    }\n  },\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n    this.set('toggle', true);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-nav-item.js":"import\nEmber\nfrom\n'ember';\nimport\nlayout\nfrom\n'../templates/components/bs-nav-item';\nimport\nComponentParent\nfrom\n'ember-bootstrap/mixins/component-parent';\n\nconst { computed, LinkComponent } = Ember;\n\n/**\n\n Component for each item within a [Components.Nav](Components.Nav.html) component. Have a look there for examples.\n\n @class NavItem\n @namespace Components\n @extends Ember.Component\n @uses Mixins.ComponentParent\n @public\n */\nexport default\nEmber.Component.extend(ComponentParent, {\n  layout,\n  classNameBindings: ['disabled', 'active'],\n  tagName: 'li',\n  ariaRole: 'presentation',\n\n  /**\n   * Render the nav item as disabled (see [Bootstrap docs](http://getbootstrap.com/components/#nav-disabled-links)).\n   * By default it will look at any nested `link-to` components and make itself disabled if there is a disabled link.\n   * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_disabling-the-code-link-to-code-component)\n   *\n   * @property disabled\n   * @type boolean\n   * @public\n   */\n  disabled: computed.gt('disabledChildLinks.length', 0),\n\n  /**\n   * Render the nav item as active.\n   * By default it will look at any nested `link-to` components and make itself active if there is an active link\n   * (i.e. the link points to the current route).\n   * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_handling-current-route)\n   *\n   * @property active\n   * @type boolean\n   * @public\n   */\n  active: computed.gt('activeChildLinks.length', 0),\n\n  /**\n   * Collection of all `Ember.LinkComponent`s that are children\n   *\n   * @property childLinks\n   * @private\n   */\n  childLinks: computed.filter('children', function(view) {\n    return view instanceof LinkComponent;\n  }),\n\n  activeChildLinks: computed.filterBy('childLinks', 'active'),\n  disabledChildLinks: computed.filterBy('childLinks', 'disabled')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-nav.js":"import Ember from 'ember';\nimport layout from '../templates/components/bs-nav';\n\nconst { isPresent } = Ember;\n\n/**\n\n Component to generate [bootstrap navs](http://getbootstrap.com/components/#nav)\n\n ### Usage\n\n Use in combination with the [Components.NavItem](Components.NavItem.html) component:\n\n ```hbs\n {{#bs-nav type=\"pills\"}}\n   {{#bs-nav-item}}\n      {{#link-to \"foo\"}}Foo{{/link-to}}\n   {{/bs-nav-item}}\n   {{#bs-nav-item}}\n     {{#link-to \"bar\"}}Bar{{/link-to}}\n   {{/bs-nav-item}}\n {{/bs-nav}}\n ```\n\n ### Nav styles\n\n The component supports the default bootstrap nav styling options \"pills\" and \"tabs\" through the `type`\n property, as well as the `justified` and `stacked` properties.\n\n ### Active items\n\n Bootstrap expects to have the `active` class on the `<li>` element that should be the active (highlighted)\n navigation item. To achieve that just use the `link-to` helper as usual. If the link is active, i.e\n it points to the current route, the `bs-nav-item` component will detect that and apply the `active` class\n automatically. The same applies for the `disabled` state.\n\n ### Dropdowns\n\n Use the [Components.Dropdown](Components.Dropdown.html) component with a `tagName` of \"li\" to integrate a dropdown into your nav:\n\n ```hbs\n {{#bs-nav type=\"pills\"}}\n   {{#bs-nav-item}}{{#link-to \"index\"}}Home{{/link-to}}{{/bs-nav-item}}\n   {{#bs-dropdown tagName=\"li\"}}\n     {{#bs-dropdown-toggle}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-toggle}}\n     {{#bs-dropdown-menu}}\n       <li>{{#link-to \"foo\"}}Foo{{/link-to}}</li>\n       <li>{{#link-to \"bar\"}}Bar{{/link-to}}</li>\n     {{/bs-dropdown-menu}}\n   {{/bs-dropdown}}\n {{/bs-nav}}\n ```\n\n @class Nav\n @namespace Components\n @extends Ember.Component\n @public\n\n */\nexport default Ember.Component.extend({\n  layout,\n\n  tagName: 'ul',\n  classNames: ['nav'],\n\n  classNameBindings: ['typeClass', 'justified:nav-justified', 'stacked:nav-stacked'],\n\n  typeClass: Ember.computed('type', function() {\n    let type = this.get('type');\n    if (isPresent(type)) {\n      return `nav-${type}`;\n    }\n  }),\n\n  /**\n   * Special type of nav, either \"pills\" or \"tabs\"\n   *\n   * @property type\n   * @type String\n   * @default null\n   * @public\n   */\n  type: null,\n\n  /**\n   * Make the nav justified, see [bootstrap docs](http://getbootstrap.com/components/#nav-justified)\n   *\n   * @property justified\n   * @type boolean\n   * @default false\n   * @public\n   */\n  justified: false,\n\n  /**\n   * Make the nav pills stacked, see [bootstrap docs](http://getbootstrap.com/components/#nav-pills)\n   *\n   * @property stacked\n   * @type boolean\n   * @default false\n   * @public\n   */\n  stacked: false\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-popover-element.js":"import Ember from 'ember';\nimport layout from '../templates/components/bs-popover-element';\n\nconst {\n  computed\n} = Ember;\n\n/**\n Internal component for popover's markup. Should not be used directly.\n\n @class PopoverElement\n @namespace Components\n @extends Ember.Component\n @private\n */\nexport default Ember.Component.extend({\n  layout,\n\n  classNames: ['popover'],\n  classNameBindings: ['placement', 'in', 'fade'],\n  ariaRole: 'tooltip',\n\n  /**\n   * @property placement\n   * @type string\n   * @default 'top'\n   * @public\n   */\n  placement: 'top',\n\n  /**\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * @property in\n   * @type boolean\n   * @default false\n   * @public\n   */\n  in: false,\n\n  /**\n   * @property title\n   * @type string\n   * @public\n   */\n  title: undefined,\n\n  /**\n   * @property hasTitle\n   * @type boolean\n   * @private\n   */\n  hasTitle: computed.notEmpty('title')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-popover.js":"import Ember from 'ember';\nimport ContextualHelp from './bs-contextual-help';\nimport layout from '../templates/components/bs-popover';\n\nconst {\n  computed\n} = Ember;\n\n/**\n Component that implements Bootstrap [popovers](http://getbootstrap.com/javascript/#popovers).\n\n By default it will attach its listeners (click) to the parent DOM element to trigger\n the popover:\n\n ```hbs\n <button class=\"btn\">\n   {{#bs-popover title=\"This is a title\"}}and this the body{{/bs-popover}}\n </button>\n ```\n\n ### Trigger\n\n The trigger element is the DOM element that will cause the popover to be shown when one of the trigger events occur on\n that element. By default the trigger element is the parent DOM element of the component, and the trigger event will be\n \"click\".\n\n The `triggerElement` property accepts any jQuery selector to attach the popover to any other existing DOM element.\n With the special value \"parentView\" you can attach the popover to the DOM element of the parent component:\n\n ```hbs\n {{#my-component}}\n   {{#bs-popover triggerElement=\"parentView\"}}This is a popover{{/bs-popover}}\n {{/my-component}}\n ```\n\n To customize the events that will trigger the popover use the `triggerEvents` property, that accepts an array or a\n string of events, with \"hover\", \"focus\" and \"click\" being supported.\n\n ### Placement options\n\n By default the popover will show up to the right of the trigger element. Use the `placement` property to change that\n (\"top\", \"bottom\", \"left\" and \"right\"). To make sure the popover will not exceed the viewport (see Advanced customization)\n you can set `autoPlacement` to true. A popover with `placement=\"right\" will be placed to the right if there is enough\n space, otherwise to the left.\n\n ### Advanced customization\n\n Several other properties allow for some advanced customization:\n * `visible` to show/hide the popover programmatically\n * `fade` to disable the fade in transition\n * `delay` (or `delayShow` and `delayHide`) to add a delay\n * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`\n\n See the individual API docs for each property.\n\n ### Actions\n\n When you want to react on the popover being shown or hidden, you can use one of the following supported actions:\n * `onShow`\n * `onShown`\n * `onHide`\n * `onHidden`\n\n @class Popover\n @namespace Components\n @extends Components.ContextualHelp\n @public\n */\nexport default ContextualHelp.extend({\n  layout,\n\n  /**\n   * @property placement\n   * @type string\n   * @default 'right'\n   * @public\n   */\n  placement: 'right',\n\n  /**\n   * @property triggerEvents\n   * @type array|string\n   * @default 'click'\n   * @public\n   */\n  triggerEvents: 'click',\n\n  /**\n   * The jQuery object of the arrow element.\n   *\n   * @property arrowElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  arrowElement: computed('overlayElement', function() {\n    return this.get('overlayElement').find('.arrow');\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-progress-bar.js":"import Ember from 'ember';\nimport TypeClass from 'ember-bootstrap/mixins/type-class';\n\nconst { computed } = Ember;\n\n/**\n\n Component to display a Bootstrap progress bar, see http://getbootstrap.com/components/#progress.\n\n ### Usage\n\n Always wrap the progress bar in a [Components.Progress](Components.Progress.html) component. Use the `value`\n property to control the progress bar's width. To apply the different styling options supplied by Bootstrap, use the\n appropriate properties like `type`, `showLabel`, `striped` or `animate`.\n\n ```hbs\n {{#bs-progress}}\n   {{bs-progress-bar value=progressValue minValue=0 maxValue=10 showLabel=true type=\"danger\"}}\n {{/bs-progress}}\n ```\n\n ### Stacked\n\n You can place multiple progress bar components in a single [Components.Progress](Components.Progress.html) to\n create a stack of progress bars as seen in http://getbootstrap.com/components/#progress-stacked.\n\n ```hbs\n {{#bs-progress}}\n   {{bs-progress-bar value=progressValue1 type=\"success\"}}\n   {{bs-progress-bar value=progressValue2 type=\"warning\"}}\n   {{bs-progress-bar value=progressValue3 type=\"danger\"}}\n {{/bs-progress}}\n ```\n\n @class ProgressBar\n @namespace Components\n @extends Ember.Component\n @uses Mixins.TypeClass\n @public\n */\nexport default Ember.Component.extend(TypeClass, {\n  classNames: ['progress-bar'],\n  classNameBindings: ['progressBarStriped', 'active'],\n\n  attributeBindings: ['style', 'ariaValuenow', 'ariaValuemin', 'ariaValuemax'],\n\n  /**\n   * @property classTypePrefix\n   * @type String\n   * @default 'progress-bar'\n   * @protected\n   */\n  classTypePrefix: 'progress-bar',\n\n  /**\n   * The lower limit of the value range\n   *\n   * @property minValue\n   * @type number\n   * @default 0\n   * @public\n   */\n  minValue: 0,\n\n  /**\n   * The upper limit of the value range\n   *\n   * @property maxValue\n   * @type number\n   * @default 100\n   * @public\n   */\n  maxValue: 100,\n\n  /**\n   * The value the progress bar should represent\n   *\n   * @property value\n   * @type number\n   * @default 0\n   * @public\n   */\n  value: 0,\n\n  /**\n   If true a label will be shown inside the progress bar.\n\n   By default it will be the percentage corresponding to the `value` property, rounded to `roundDigits` digits.\n   You can customize it by using the component with a block template, which the component yields the percentage\n   value to:\n\n   ```hbs\n   {{#bs-progress}}\n     {{#bs-progress-bar value=progressValue as |percent|}}{{progressValue}} ({{percent}}%){{/bs-progress-bar}}\n   {{/bs-progress}}\n   ```\n\n   @property showLabel\n   @type boolean\n   @default false\n   @public\n   */\n  showLabel: false,\n\n  /**\n   * Create a striped effect, see http://getbootstrap.com/components/#progress-striped\n   *\n   * @property striped\n   * @type boolean\n   * @default false\n   * @public\n   */\n  striped: false,\n\n  /**\n   * Animate the stripes, see http://getbootstrap.com/components/#progress-animated\n   *\n   * @property animate\n   * @type boolean\n   * @default false\n   * @public\n   */\n  animate: false,\n\n  /**\n   * Specify to how many digits the progress bar label should be rounded.\n   *\n   * @property roundDigits\n   * @type number\n   * @default 0\n   * @public\n   */\n  roundDigits: 0,\n\n  progressBarStriped: computed.alias('striped'),\n  active: computed.alias('animate'),\n\n  ariaValuenow: computed.alias('value'),\n  ariaValuemin: computed.alias('minValue'),\n  ariaValuemax: computed.alias('maxValue'),\n\n  /**\n   * The percentage of `value`\n   *\n   * @property percent\n   * @type number\n   * @protected\n   * @readonly\n   */\n  percent: computed('value', 'minValue', 'maxValue', function() {\n    let value = parseFloat(this.get('value'));\n    let minValue = parseFloat(this.get('minValue'));\n    let maxValue = parseFloat(this.get('maxValue'));\n\n    return Math.min(Math.max((value - minValue) / (maxValue - minValue), 0), 1) * 100;\n  }),\n\n  /**\n   * The percentage of `value`, rounded to `roundDigits` digits\n   *\n   * @property percentRounded\n   * @type number\n   * @protected\n   * @readonly\n   */\n  percentRounded: computed('percent', 'roundDigits', function() {\n    let roundFactor = Math.pow(10, this.get('roundDigits'));\n    return Math.round(this.get('percent') * roundFactor) / roundFactor;\n  }),\n\n  /**\n   * @property style\n   * @type string\n   * @private\n   * @readonly\n   */\n  style: computed('percent', function() {\n    let percent = this.get('percent');\n    return new Ember.String.htmlSafe(`width: ${percent}%`);\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-progress.js":"import Ember from 'ember';\n\n/**\n Use to group one (or more) [Components.ProgressBar](Components.ProgressBar.html) components inside it.\n\n @class Progress\n @namespace Components\n @extends Ember.Component\n @public\n */\nexport default Ember.Component.extend({\n  classNames: ['progress']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-select.js":"import Ember from 'ember';\n\n/**\n Selectbox component.\n\n #### Deprecated ####\n\n Usage of this component is deprecated. Please use one of the better alternatives for select boxes in Ember, as one of\n those: https://www.emberaddons.com/?query=select%20component.\n\n If you use it with a FormElement component as in `{{bs-form-element controlType=\"select\" ... }}`, then see the section\n on custom Controls in [Components.FormElement](Components.FormElement.html) to learn how to replace this with an external\n select component.\n\n @class Select\n @namespace Components\n @extends Ember.Component\n @deprecated\n @public\n */\nexport default Ember.Component.extend({\n  tagName: 'select',\n  classNames: ['form-control'],\n\n  attributeBindings: ['disabled', 'required'],\n  disabled: false,\n  required: false,\n\n  content: null,\n  prompt: null,\n  optionValuePath: 'id',\n  optionLabelPath: 'title',\n  action: Ember.K, // action to fire on change\n\n  value: null,\n\n  init() {\n    this._super(...arguments);\n\n    Ember.deprecate('bs-select is deprecated and will be removed in the future. Please use a dedicated addon for select box components', false, {\n      url: 'http://kaliber5.github.io/ember-bootstrap/api/classes/Components.Select.html',\n      until: '0.8.0',\n      id: 'ember-bootstrap.component.select'\n    });\n\n    if (!this.get('content')) {\n      this.set('content', []);\n    }\n  },\n\n  change() {\n    let selectEl = this.$().get(0);\n    let { selectedIndex } = selectEl;\n    let content = this.get('content');\n\n    // decrement index by 1 if we have a prompt\n    let hasPrompt = !!this.get('prompt');\n    let contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;\n\n    let selection = content[contentIndex];\n\n    // set the local, shadowed selection to avoid leaking\n    // changes to `selection` out via 2-way binding\n    this.set('value', selection);\n\n    let changeCallback = this.get('action');\n    changeCallback(selection);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-tab.js":"import Ember from 'ember';\nimport layout from '../templates/components/bs-tab';\nimport ComponentParent from 'ember-bootstrap/mixins/component-parent';\nimport TabPane from './bs-tab-pane';\n\nconst { computed, isPresent, A } = Ember;\n\n/**\n Tab component for dynamic tab functionality that mimics the behaviour of Bootstrap's tab.js plugin,\n see http://getbootstrap.com/javascript/#tabs\n\n ### Usage\n\n Just nest any number of [Components.TabPane](Components.TabPane.html) components that hold the tab content.\n The tab navigation is automatically generated from the tab panes' `title` property:\n\n ```hbs\n {{#bs-tab type=type.id}}\n   {{#bs-tab-pane title=\"Tab 1\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n   {{#bs-tab-pane title=\"Tab 2\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n {{/bs-tab}}\n ```\n\n ### Groupable (dropdown) tabs\n\n Bootstrap's support for dropdown menus as tab navigation is mimiced by the use of the `groupTitle` property.\n All panes with the same `groupTitle` will be put inside the menu of a [Components.Dropdown](Components.Dropdown.html)\n component with `groupTitle` being the dropdown's title:\n\n ```hbs\n {{#bs-tab type=type.id}}\n    {{#bs-tab-pane title=\"Tab 1\"}}\n      <p>...</p>\n    {{/bs-tab-pane}}\n    {{#bs-tab-pane title=\"Tab 2\"}}\n      <p>...</p>\n    {{/bs-tab-pane}}\n    {{#bs-tab-pane title=\"Tab 3\" groupTitle=\"Dropdown\"}}\n      <p>...</p>\n    {{/bs-tab-pane}}\n    {{#bs-tab-pane title=\"Tab 4\" groupTitle=\"Dropdown\"}}\n      <p>...</p>\n    {{/bs-tab-pane}}\n {{/bs-tab}}\n ```\n\n ### Custom tabs\n\n When having the tab pane's `title` as the tab navigation title is not sufficient, for example because you want to\n integrate some other dynamic content, maybe even other components in the tab navigation item, then you have to setup\n your navigation by yourself.\n\n Set `customTabs` to true to deactivate the automatic tab navigation generation. Then setup your navigation, probably\n using a [Components.Nav](Components.Nav.html) component. The tab component yields the `activeId` property as well as\n its `select` action, which you would have to use to manually set the `active` state of the navigation items and to\n trigger the selection of the different tab panes, using their ids:\n\n ```hbs\n {{#bs-tab customTabs=true as |activeId select|}}\n    {{#bs-nav type=\"tabs\"}}\n        {{#bs-nav-item active=(bs-eq activeId \"pane1\")}}<a href=\"#pane1\" role=\"tab\" {{action select \"pane1\"}}>Tab 1</a>{{/bs-nav-item}}\n        {{#bs-nav-item active=(bs-eq activeId \"pane2\")}}<a href=\"#pane1\" role=\"tab\" {{action select \"pane2\"}}>Tab 2 <span class=\"badge\">{{badge}}</span></a>{{/bs-nav-item}}\n    {{/bs-nav}}\n\n    <div class=\"tab-content\">\n    {{#bs-tab-pane elementId=\"pane1\" title=\"Tab 1\"}}\n        <p>...</p>\n    {{/bs-tab-pane}}\n    {{#bs-tab-pane elementId=\"pane2\" title=\"Tab 2\"}}\n        <p>...</p>\n    {{/bs-tab-pane}}\n    </div>\n {{/bs-tab}}\n ```\n\n Note that the `bs-eq` helper used in the example above is a private helper, which is not guaranteed to be available for\n the future. Better use the corresponding `eq` helper of the\n [ember-truth-helpers](https://github.com/jmurphyau/ember-truth-helpers) addon for example!\n\n ### Routable tabs\n\n The tab component purpose is to have panes of content, that are all in DOM at the same time and that are activated and\n deactivated dynamically, just as the  original Bootstrap implementation.\n\n If you want to have the content delivered through individual sub routes, just use\n the [Components.Nav](Components.Nav.html) component and an `{{outlet}}` that show the nested routes' content:\n\n ```hbs\n <div>\n   {{#bs-nav type=\"tabs\"}}\n     {{#bs-nav-item}}{{#link-to \"tabs.index\"}}Tab 1{{/link-to}}{{/bs-nav-item}}\n     {{#bs-nav-item}}{{#link-to \"tabs.other\"}}Tab 2{{/link-to}}{{/bs-nav-item}}\n   {{/bs-nav}}\n   {{outlet}}\n </div>\n ```\n\n @class Tab\n @namespace Components\n @extends Ember.Component\n @uses Mixins.ComponentParent\n @public\n */\nexport default Ember.Component.extend(ComponentParent, {\n  layout,\n\n  /**\n   * Type of nav, either \"pills\" or \"tabs\"\n   *\n   * @property type\n   * @type String\n   * @default 'tabs'\n   * @public\n   */\n  type: 'tabs',\n\n  /**\n   * By default the tabs will be automatically generated using the available [TabPane](Components.TabPane.html)\n   * components. If set to true, you can deactivate this and setup the tabs manually. See the example above.\n   *\n   * @property customTabs\n   * @type boolean\n   * @default false\n   * @public\n   */\n  customTabs: false,\n\n  /**\n   * The id (`elementId`) of the active [TabPane](Components.TabPane.html).\n   * By default the first tab will be active, but this can be changed by setting this property\n   *\n   * ```hbs\n   * {{#bs-tab activeId=\"pane2\"}}\n   *   {{#bs-tab-pane id=\"pane1\" title=\"Tab 1\"}}\n   *      ...\n   *   {{/bs-tab-pane}}\n   *   {{#bs-tab-pane id=\"pane1\" title=\"Tab 1\"}}\n   *     ...\n   *   {{/bs-tab-pane}}\n   * {{/bs-tab}}\n   * ```\n   *\n   * @property activeId\n   * @type string\n   * @public\n   */\n  activeId: computed.oneWay('childPanes.firstObject.elementId'),\n\n  /**\n   * Set to false to disable the fade animation when switching tabs.\n   *\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * The duration of the fade animation\n   *\n   * @property fadeDuration\n   * @type integer\n   * @default 150\n   * @public\n   */\n  fadeDuration: 150,\n\n  /**\n   * action is called when switching the active tab, with the new and previous pane id\n   *\n   * @event action\n   * @public\n   */\n  action: null,\n\n  /**\n   * All `TabPane` child components\n   *\n   * @property childPanes\n   * @type array\n   * @readonly\n   * @private\n   */\n  childPanes: computed.filter('children', function(view) {\n    return view instanceof TabPane;\n  }),\n\n  /**\n   * Array of objects that define the tab structure\n   *\n   * @property navItems\n   * @type array\n   * @readonly\n   * @private\n   */\n  navItems: computed('childPanes.@each.{elementId,title,group}', function() {\n    let items = A();\n    this.get('childPanes').forEach((pane) => {\n      let groupTitle = pane.get('groupTitle');\n      let item = pane.getProperties('elementId', 'title');\n      if (isPresent(groupTitle)) {\n        let group = items.findBy('groupTitle', groupTitle);\n        if (group) {\n          group.children.push(item);\n          group.childIds.push(item.elementId);\n        } else {\n          items.push({\n            isGroup: true,\n            groupTitle,\n            children: A([item]),\n            childIds: A([item.elementId])\n          });\n        }\n      } else {\n        items.push(item);\n      }\n    });\n    return items;\n  }),\n\n  actions: {\n    select(id) {\n      let previous = this.get('activeId');\n      this.set('activeId', id);\n      this.sendAction('action', id, previous);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-tab-pane.js":"import Ember from 'ember';\nimport layout from '../templates/components/bs-tab-pane';\nimport ComponentChild from 'ember-bootstrap/mixins/component-child';\nimport Tab from './bs-tab';\n\nconst { computed, observer } = Ember;\n\n/**\n The tab pane of a tab component.\n See [Components.Tab](Components.Tab.html) for examples.\n\n @class TabPane\n @namespace Components\n @extends Ember.Component\n @uses Mixins.ComponentChild\n @public\n */\nexport default Ember.Component.extend(ComponentChild, {\n  layout,\n  classNameBindings: ['active', 'fade', 'in'],\n  classNames: ['tab-pane'],\n  ariaRole: 'tabpanel',\n\n  /**\n   * True if this pane is active (visible)\n   *\n   * @property isActive\n   * @type boolean\n   * @protected\n   */\n  isActive: computed('tab.activeId', 'elementId', function() {\n    return this.get('tab.activeId') === this.get('elementId');\n  }),\n\n  /**\n   * Used to apply Bootstrap's \"active\" class\n   *\n   * @property active\n   * @type boolean\n   * @default false\n   * @protected\n   */\n  active: false,\n\n  /**\n   * Used to apply Bootstrap's \"in\" class\n   *\n   * @property in\n   * @type boolean\n   * @default false\n   * @protected\n   */\n  'in': false,\n\n  /**\n   * Use CSS transitions when showing/hiding the pane?\n   *\n   * @property usesTransition\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  usesTransition: computed('fade', function() {\n    return Ember.$.support.transition && this.get('fade');\n  }),\n\n  /**\n   * The parent [Components.Tab](Components.Tab.html) instance.\n   *\n   * @property tab\n   * @type {Components.Tab}\n   * @protected\n   */\n  tab: computed(function() {\n    return this.nearestOfType(Tab);\n  }),\n\n  /**\n   * The title for this tab pane. This is used by the `bs-tab` component to automatically generate\n   * the tab navigation.\n   * See the [Components.Tab](Components.Tab.html) for examples.\n   *\n   * @property title\n   * @type string\n   * @default null\n   * @public\n   */\n  title: null,\n\n  /**\n   * An optional group title used by the `bs-tab` component to group all panes with the same group title\n   * under a common drop down in the tab navigation.\n   * See the [Components.Tab](Components.Tab.html) for examples.\n   *\n   * @property groupTitle\n   * @type string\n   * @default null\n   * @public\n   */\n  groupTitle: null,\n\n  /**\n   * Use fade animation when switching tabs.\n   *\n   * @property fade\n   * @type boolean\n   * @readonly\n   * @protected\n   */\n  fade: computed.readOnly('tab.fade'),\n\n  /**\n   * The duration of the fade out animation\n   *\n   * @property fadeDuration\n   * @type integer\n   * @readonly\n   * @protected\n   */\n  fadeDuration: computed.readOnly('tab.fadeDuration'),\n\n  /**\n   * Show the pane\n   *\n   * @method show\n   * @protected\n   */\n  show() {\n    if (this.get('usesTransition')) {\n      this.$()\n        .one('bsTransitionEnd', Ember.run.bind(this, function() {\n          if (!this.get('isDestroyed')) {\n            this.setProperties({\n              active: true,\n              in: true\n            });\n          }\n        }))\n        .emulateTransitionEnd(this.get('fadeDuration'));\n    } else {\n      this.set('active', true);\n    }\n  },\n\n  /**\n   * Hide the pane\n   *\n   * @method hide\n   * @protected\n   */\n  hide() {\n    if (this.get('usesTransition')) {\n      this.$()\n        .one('bsTransitionEnd', Ember.run.bind(this, function() {\n          if (!this.get('isDestroyed')) {\n            this.set('active', false);\n          }\n        }))\n        .emulateTransitionEnd(this.get('fadeDuration'));\n      this.set('in', false);\n    } else {\n      this.set('active', false);\n    }\n  },\n\n  _showHide: observer('isActive', function() {\n    if (this.get('isActive')) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }),\n\n  init() {\n    this._super(...arguments);\n    Ember.run.scheduleOnce('afterRender', this, function() {\n      // isActive comes from parent component, so only available after render...\n      this.set('active', this.get('isActive'));\n      this.set('in', this.get('isActive') && this.get('fade'));\n    });\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-textarea.js":"import Ember from 'ember';\n\n/**\n Extends Ember.TextArea to add Bootstrap's 'form-control' class.\n\n @class Textarea\n @namespace Components\n @extends Ember.TextArea\n @public\n */\nexport default Ember.TextArea.extend({\n  classNames: ['form-control']\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-tooltip-element.js":"import Ember from 'ember';\nimport layout from '../templates/components/bs-tooltip-element';\n\n/**\n Internal component for tooltip's markup. Should not be used directly.\n\n @class TooltipElement\n @namespace Components\n @extends Ember.Component\n @private\n */\nexport default Ember.Component.extend({\n  layout,\n\n  classNames: ['tooltip'],\n  classNameBindings: ['placement', 'in', 'fade'],\n  ariaRole: 'tooltip',\n\n  /**\n   * @property placement\n   * @type string\n   * @default 'top'\n   * @public\n   */\n  placement: 'top',\n\n  /**\n   * @property fade\n   * @type boolean\n   * @default true\n   * @public\n   */\n  fade: true,\n\n  /**\n   * @property in\n   * @type boolean\n   * @default false\n   * @public\n   */\n  in: false\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/components/bs-tooltip.js":"import Ember from 'ember';\nimport ContextualHelp from './bs-contextual-help';\nimport layout from '../templates/components/bs-tooltip';\n\nconst {\n  computed\n} = Ember;\n\n/**\n Component that implements Bootstrap [tooltips](http://getbootstrap.com/javascript/#tooltips).\n\n By default it will attach its listeners (mouseover and focus) to the parent DOM element to trigger\n the tooltip:\n\n ```hbs\n <button class=\"btn\">\n   {{bs-tooltip title=\"This is a tooltip\"}}\n </button>\n ```\n\n You can also use the component in a block form to set the title:\n\n ```hbs\n <button class=\"btn\">\n   {{#bs-tooltip}}This is a tooltip{{/bs-tooltip}}\n </button>\n ```\n\n ### Trigger\n\n The trigger element is the DOM element that will cause the tooltip to be shown when one of the trigger events occur on\n that element. By default the trigger element is the parent DOM element of the component, and the trigger events will be\n \"hover\" and \"focus\".\n\n The `triggerElement` property accepts any jQuery selector to attach the tooltip to any other existing DOM element.\n With the special value \"parentView\" you can attach the tooltip to the DOM element of the parent component:\n\n ```hbs\n {{#my-component}}\n   {{bs-tooltip title=\"This is a tooltip\" triggerElement=\"parentView\"}}\n {{/my-component}}\n ```\n\n To customize the events that will trigger the tooltip use the `triggerEvents` property, that accepts an array or a\n string of events, with \"hover\", \"focus\" and \"click\" being supported.\n\n ### Placement options\n\n By default the tooltip will show up on top of the trigger element. Use the `placement` property to change that\n (\"top\", \"bottom\", \"left\" and \"right\"). To make sure the tooltip will not exceed the viewport (see Advanced customization)\n you can set `autoPlacement` to true. A tooltip with `placement=\"right\" will be placed to the right if there is enough\n space, otherwise to the left.\n\n ### Advanced customization\n\n Several other properties allow for some advanced customization:\n * `visible` to show/hide the tooltip programmatically\n * `fade` to disable the fade in transition\n * `delay` (or `delayShow` and `delayHide`) to add a delay\n * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`\n\n See the individual API docs for each property.\n\n ### Actions\n\n When you want to react on the tooltip being shown or hidden, you can use one of the following supported actions:\n * `onShow`\n * `onShown`\n * `onHide`\n * `onHidden`\n\n @class Tooltip\n @namespace Components\n @extends Components.ContextualHelp\n @public\n */\nexport default ContextualHelp.extend({\n  layout,\n\n  /**\n   * The jQuery object of the arrow element.\n   *\n   * @property arrowElement\n   * @type object\n   * @readonly\n   * @private\n   */\n  arrowElement: computed('overlayElement', function() {\n    return this.get('overlayElement').find('.tooltip-arrow');\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/helpers/bs-contains.js":"import Ember from 'ember';\n\nconst { isArray, A } = Ember;\n\nexport function bsContains(params/*, hash*/) {\n  return isArray(params[0]) ? A(params[0]).includes(params[1]) : false;\n}\n\nexport default Ember.Helper.helper(bsContains);\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/helpers/bs-eq.js":"import Ember from 'ember';\n\nexport function eq(params) {\n  return params[0] === params[1];\n}\n\nexport default Ember.Helper.helper(eq);\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/helpers/bs-not.js":"import Ember from 'ember';\n\nexport function not(params/*, hash*/) {\n  return !params[0];\n}\n\nexport default Ember.Helper.helper(not);\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/helpers/bs-read-path.js":"import Ember from 'ember';\n\nexport function readPath(params/*, hash*/) {\n  return Ember.get(params[0], params[1]);\n}\n\nexport default Ember.Helper.helper(readPath);\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/initializers/bootstrap-linkto.js":"import Ember from 'ember';\nimport ComponentChildMixin from 'ember-bootstrap/mixins/component-child';\n\nconst { LinkComponent } = Ember;\n\nexport function initialize(/* application */) {\n  if (!ComponentChildMixin.detect(LinkComponent)) {\n    LinkComponent.reopen(ComponentChildMixin);\n  }\n}\n\nexport default {\n  name: 'bootstrap-linkto',\n  initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/initializers/modals-container.js":"import Config from 'ember-bootstrap/config';\n\n/*globals document */\nconst hasDOM = typeof document !== 'undefined';\n\nfunction appendContainerElement(rootElementId, id) {\n  if (!hasDOM) {\n    return;\n  }\n\n  let rootEl = document.querySelector(rootElementId);\n  let modalContainerEl = document.createElement('div');\n  modalContainerEl.id = id;\n  rootEl.appendChild(modalContainerEl);\n}\n\nfunction initialize() {\n  if (!Config.insertEmberWormholeElementToDom) {\n    return;\n  }\n  let application = arguments[1] || arguments[0];\n  let modalContainerElId = 'ember-bootstrap-modal-container';\n  appendContainerElement(application.rootElement, modalContainerElId);\n}\n\nexport default {\n  name: 'modals-container',\n  initialize\n};","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/component-child.js":"import Ember from 'ember';\nimport ComponentParentMixin from 'ember-bootstrap/mixins/component-parent';\n\n/**\n * Mixin for components that act as a child component in a parent-child relationship of components\n *\n * @class ComponentChild\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create({\n\n  /**\n   * flag to check if component has already been rendered, for the `_willRender` event handler\n   * @property _didInsert\n   * @type boolean\n   * @private\n   */\n  _didInsert: false,\n\n  /**\n   * Register ourself as a child at the parent component\n   * We use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`\n   *\n   * @method _willRender\n   * @private\n   */\n  _willRender: Ember.on('willRender', function() {\n    if (!this._didInsert) {\n      this._didInsert = true;\n      let parent = this.nearestOfType(ComponentParentMixin);\n      if (parent) {\n        parent.registerChild(this);\n        this.set('_parent', parent);\n      }\n    }\n  }),\n\n  /**\n   * stores the parent in didInsertElement hook as a work-a-round for\n   * https://github.com/emberjs/ember.js/issues/12080\n   *\n   * @property _parent\n   * @private\n   */\n  _parent: null,\n\n  /**\n   * Unregister form the parent component\n   *\n   * @method _willDestroyElement\n   * @private\n   */\n  _willDestroyElement: Ember.on('willDestroyElement', function() {\n    let parent = this.nearestOfType(ComponentParentMixin) || this.get('_parent');\n    if (parent) {\n      parent.removeChild(this);\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/component-parent.js":"import Ember from 'ember';\n\n/**\n * Mixin for components that act as a parent component in a parent-child relationship of components\n *\n * @class ComponentParent\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create({\n\n  /**\n   * Array of registered child components\n   *\n   * @property children\n   * @type array\n   * @protected\n   */\n  children: null,\n\n  _onInit: Ember.on('init', function() {\n    this.set('children', Ember.A());\n  }),\n\n  /**\n   * Register a component as a child of this parent\n   *\n   * @method registerChild\n   * @param child\n   * @public\n   */\n  registerChild(child) {\n    Ember.run.schedule('sync', this, function() {\n      this.get('children').addObject(child);\n    });\n  },\n\n  /**\n   * Remove the child component from this parent component\n   *\n   * @method removeChild\n   * @param child\n   * @public\n   */\n  removeChild(child) {\n    this.get('children').removeObject(child);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/dropdown-toggle.js":"import Ember from 'ember';\nimport componentChild from 'ember-bootstrap/mixins/component-child';\n\n/**\n * Mixin for components that act as dropdown toggles.\n *\n * @class DropdownToggle\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create(componentChild, {\n  classNames: ['dropdown-toggle'],\n\n  /**\n   * @property ariaRole\n   * @default button\n   * @type string\n   * @protected\n   */\n  ariaRole: 'button',\n\n  targetObject: Ember.computed.alias('parentView'),\n\n  /**\n   * The default action is set to \"toggleDropdown\" on the parent {{#crossLink \"Components.Dropdown\"}}{{/crossLink}}\n   *\n   * @property action\n   * @default toggleDropdown\n   * @type string\n   * @protected\n   */\n  action: 'toggleDropdown'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/modal-closer.js":"import Ember from 'ember';\nimport ModalComponent from '../components/bs-modal';\n\n/**\n * @class ModalCloser\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create({\n  targetObject: Ember.computed(function() {\n    return this.nearestOfType(ModalComponent);\n  }).volatile(),\n\n  action: 'close',\n\n  actions: {\n    close() {\n      this.sendAction();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/size-class.js":"import Ember from 'ember';\n\n/**\n * Mixin to set the appropriate class for components with different sizes.\n *\n *\n * @class SizeClass\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create({\n  /**\n   * Prefix for the size class, e.g. \"btn\" for button size classes (\"btn-lg\", \"btn-sm\" etc.)\n   *\n   * @property classTypePrefix\n   * @type string\n   * @required\n   * @protected\n   */\n  classTypePrefix: null,\n\n  classNameBindings: ['sizeClass'],\n\n  sizeClass: Ember.computed('size', function() {\n    let prefix = this.get('classTypePrefix');\n    let size = this.get('size');\n    return Ember.isBlank(size) ? null : `${prefix}-${size}`;\n  }),\n\n  /**\n   * Property for size styling, set to 'lg', 'sm' or 'xs'\n   *\n   * Also see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\n   *\n   * @property size\n   * @type String\n   * @public\n   */\n  size: null\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/sub-component.js":"import Ember from 'ember';\n\n/**\n * @class SubComponent\n * @namespace Mixins\n * @deprecated\n * @private\n */\nexport default Ember.Mixin.create({\n  targetObject: Ember.computed.alias('parentView')\n});","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/mixins/type-class.js":"import Ember from 'ember';\n\n/**\n * Mixin to set the appropriate class for components with differently styled types (\"success\", \"danger\" etc.)\n *\n * @class TypeClass\n * @namespace Mixins\n * @private\n */\nexport default Ember.Mixin.create({\n  /**\n   * Prefix for the type class, e.g. \"btn\" for button type classes (\"btn-primary2 etc.)\n   *\n   * @property classTypePrefix\n   * @type string\n   * @required\n   * @protected\n   */\n  classTypePrefix: null,\n\n  classNameBindings: ['typeClass'],\n\n  typeClass: Ember.computed('type', function() {\n    let prefix = this.get('classTypePrefix');\n    let type = this.get('type') || 'default';\n    return `${prefix}-${type}`;\n  }),\n\n  /**\n   * Property for type styling\n   *\n   * For the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without \"btn-\" prefix)\n   *\n   * @property type\n   * @type String\n   * @default 'default'\n   * @public\n   */\n  type: 'default'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/utils/get-calculated-offset.js":"import Ember from 'ember';\n\nconst { assert } = Ember;\n\nexport default function getCalculatedOffset(placement, pos, actualWidth, actualHeight) {\n  switch (placement) {\n    case 'bottom':\n      return { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 };\n    case 'top':\n      return { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 };\n    case 'left':\n      return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth };\n    case 'right':\n      return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };\n    default:\n      assert('position must be one of bottom|top|left|right', false);\n  }\n}","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/utils/get-parent.js":"import Ember from 'ember';\n\nconst { get, $ } = Ember;\n\nexport default function getParent(view) {\n  if (get(view, 'tagName') === '') {\n    // Beware: use of private API! :(\n    if (Ember.ViewUtils && Ember.ViewUtils.getViewBounds) {\n      return $(Ember.ViewUtils.getViewBounds(view).parentElement);\n    } else {\n      return $(view._renderNode.contextualElement);\n    }\n  } else {\n    return view.$().parent();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/addon/utils/get-position.js":"import Ember from 'ember';\n\nconst { $ } = Ember;\n\nexport default function getPosition($element) {\n  let el = $element.get(0);\n  let isBody = el.tagName === 'BODY';\n\n  let elRect = el.getBoundingClientRect();\n\n  // not needed as we won't support IE8\n  //\n  // if (elRect.width == null) {\n  //   // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n  //   elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n  // }\n\n  let isSvg = window.SVGElement && el instanceof window.SVGElement;\n  // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n  // See https://github.com/twbs/bootstrap/issues/20280\n  let elOffset = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset());\n  let scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };\n  let outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;\n\n  return $.extend({}, elRect, scroll, outerDims, elOffset);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-accordion-item.js":"export { default } from 'ember-bootstrap/components/bs-accordion-item';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-accordion.js":"export { default } from 'ember-bootstrap/components/bs-accordion';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-alert.js":"export { default } from 'ember-bootstrap/components/bs-alert';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-button-group.js":"import bsButtonGroup from 'ember-bootstrap/components/bs-button-group';\n\nexport default bsButtonGroup;\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-button.js":"import bsButton from 'ember-bootstrap/components/bs-button';\n\nexport default bsButton;\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-collapse.js":"export { default } from 'ember-bootstrap/components/bs-collapse';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-dropdown-button.js":"export { default } from 'ember-bootstrap/components/bs-dropdown-button';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-dropdown.js":"export { default } from 'ember-bootstrap/components/bs-dropdown';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-dropdown-menu.js":"export { default } from 'ember-bootstrap/components/bs-dropdown-menu';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-dropdown-toggle.js":"export { default } from 'ember-bootstrap/components/bs-dropdown-toggle';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-form-element.js":"export { default } from 'ember-bootstrap/components/bs-form-element';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-form-group.js":"export { default } from 'ember-bootstrap/components/bs-form-group';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-form.js":"export { default } from 'ember-bootstrap/components/bs-form';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-input.js":"export { default } from 'ember-bootstrap/components/bs-input';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal-backdrop.js":"export { default } from 'ember-bootstrap/components/bs-modal-backdrop';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal-body.js":"export { default } from 'ember-bootstrap/components/bs-modal-body';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal-dialog.js":"export { default } from 'ember-bootstrap/components/bs-modal-dialog';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal-footer.js":"export { default } from 'ember-bootstrap/components/bs-modal-footer';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal-header.js":"export { default } from 'ember-bootstrap/components/bs-modal-header';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-modal.js":"export { default } from 'ember-bootstrap/components/bs-modal';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-navbar-content.js":"export { default } from 'ember-bootstrap/components/bs-navbar-content';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-navbar.js":"export { default } from 'ember-bootstrap/components/bs-navbar';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-navbar-nav.js":"export { default } from 'ember-bootstrap/components/bs-navbar-nav';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-navbar-toggle.js":"export { default } from 'ember-bootstrap/components/bs-navbar-toggle';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-nav-item.js":"export { default } from 'ember-bootstrap/components/bs-nav-item';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-nav.js":"export { default } from 'ember-bootstrap/components/bs-nav';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-popover-element.js":"export { default } from 'ember-bootstrap/components/bs-popover-element';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-popover.js":"export { default } from 'ember-bootstrap/components/bs-popover';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-progress-bar.js":"export { default } from 'ember-bootstrap/components/bs-progress-bar';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-progress.js":"export { default } from 'ember-bootstrap/components/bs-progress';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-select.js":"export { default } from 'ember-bootstrap/components/bs-select';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-tab.js":"export { default } from 'ember-bootstrap/components/bs-tab';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-tab-pane.js":"export { default } from 'ember-bootstrap/components/bs-tab-pane';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-textarea.js":"export { default } from 'ember-bootstrap/components/bs-textarea';\n\n\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-tooltip-element.js":"export { default } from 'ember-bootstrap/components/bs-tooltip-element';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/components/bs-tooltip.js":"export { default } from 'ember-bootstrap/components/bs-tooltip';","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/helpers/bs-contains.js":"export { default, bsContains } from 'ember-bootstrap/helpers/bs-contains';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/helpers/bs-eq.js":"export { default, eq } from 'ember-bootstrap/helpers/bs-eq';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/helpers/bs-not.js":"export { default, not } from 'ember-bootstrap/helpers/bs-not';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/helpers/bs-read-path.js":"export { default, readPath } from 'ember-bootstrap/helpers/bs-read-path';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/initializers/bootstrap-linkto.js":"export { default, initialize } from 'ember-bootstrap/initializers/bootstrap-linkto';\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/initializers/load-bootstrap-config.js":"import ENV from '../config/environment';\nimport Config from 'ember-bootstrap/config';\n\nexport function initialize(/* container, application */) {\n    Config.load(ENV['ember-bootstrap'] || {});\n}\n\nexport default {\n  name: 'load-bootstrap-config',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/app/initializers/modals-container.js":"import initializer from 'ember-bootstrap/initializers/modals-container';\n\nexport default initializer;\n","/home/travis/build/npmtest/node-npmtest-ember-bootstrap/node_modules/ember-bootstrap/blueprints/ember-bootstrap/index.js":"module.exports = {\n    normalizeEntityName: function() {\n    },\n\n    afterInstall: function() {\n        return this.addBowerPackageToProject('bootstrap', '~3.3.5');\n    }\n};"}